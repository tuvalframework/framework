import { ByteArray, char, int, New } from "../float";
import { isWhitespace } from "../Char";
import { Base64 } from "../Encoding/Base64";
import { Convert } from "../convert";
import { ArgumentNullException } from "../Exceptions/ArgumentNullException";
import { ArgumentOutOfRangeException } from '../Exceptions/ArgumentOutOfRangeException';
import { Environment } from "../Environment";
import { Out } from "../Out";
import { is } from "../is";
import { System } from "../SystemTypes";
import { byte } from "../byte";
import { Context } from '../Context/Context';
import { CultureInfo } from "../Globalization/CultureInfo";

//import { CultureInfo } from "../Globalization/CultureInfo";

const UnicodeFile: string = 'bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCIuLi8uLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXItbG9hZGVyL2xpYi90by1hcnJheS1idWZmZXIuanMiKSgiWXdCb0FHRUFjZ0JwQUc0QVpnQnZBQzRBYmdCc0FIQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEd0FBQUFRV2dBQXVGb0FBRkNLQUFDUWl3QUFBQkVRRVNBUk1CRkFFVkFSWUJGd0VZQVJrQkdnRWJBUndCSFFFZUFSOEJFQUVoQVNJQkl3RWtBU0VCSlFFbUFTY0JLQUVwQVNvQkt3RXNBUzBCTGdFdkFTQUJNUUV5QVRNQk5BRTFBVFlCTndFNEFUa0JPZ0U3QVR3QlBRRStBVDhCTUFGQkFVSUJRUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFakFVRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTUUJSUUZCQVNFQklRRW1BVUVCSndGSUFVa0JTZ0ZMQVV3QlFRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUV0QVU0QlRnRk9BVTRCVGdGT0FVNEJUZ0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVRUJJQUZSQVZJQlV3RlVBVlVCVmdGWEFWZ0JXUUZhQVZzQlVRRXNBVjBCWGdGZkFWQUJZUUZpQVdNQllnRmtBV1VCWmdGbkFXZ0JhUUZxQVdzQmJBRmlBVzBCWWdGaUFXSUJZZ0ZpQVdFQklRRWhBUzRCYndGZ0FYSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZUUVoQVNFQklRRWhBWElCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdFQklRRWlBWElCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdFQklRRWpBWFFCY2dGaUFXSUJaUUZ5QVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdZQmNnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV2NCY2dGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGb0FYa0JlZ0Y3QVh3QmZRRitBWDhCZHdFM0FUQUJnZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmhBWUlCWWdGaUFXSUJZZ0ZpQVlJQll3R0VBWVVCaGdHSEFZZ0JpUUdLQVlzQmpBR0NBV0lCWWdGaUFXSUJZZ0ZoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBUzBCZ1FFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRXVBWThCZ1FFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJUUVoQVNFQklRRWhBU0VCSVFFaEFTRUJJQUdTQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWVFFaEFTRUJrZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBWk1Ca2dGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXSUJZZ0ZpQVdJQllnRmlBV0lCWWdGaUFXOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVVRQm53RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCVHdGUEFVOEJUd0ZQQVU4QlR3RlBBVThCUkFHVkFaV0JsZ0dXZ1pjQmw0R1lBWmlCbVFHWmdab0Jtb0diQVp1Qm5BR2NnWjBCblFHZEFaMkJuZ0dkQVowQm5vR2ZBWitCa0FHZ2dhRUJvWUd0QVpJQnJRR2RBWjBCa29HakFhd0JuQUdjQVp3Qms0R3NBWlFCcElHbEFhV0JwZ0dtZ2FhQnBvR21nYWFCcG9HbWdhY0JwNEdvQWFpQnJBR1pBYW1CclFHYUFhc0Jtd0diQVp3Qm5BR2NBWjBCblFHYWdhMEJuUUdkQVpzQnJRR2RBWjBCblFHZEFaMEJtNEdyQVp3QnJJR3NBWjBCcllHbWdhNEJyb0d2QWErQm9BR3dnYkVCc1lHeGdiSUJ0b0dpZ2JNQnNZR3hnYkdCc1lHeGdiT0J0QUcwZ2JVQnRZR3hnYmFCcGdHeGdiR0JzWUd4Z2JHQnRvRzNBYmVCdndHb0FiaUJ2d0dwQWJtQnVnRy9BYXFCdXdHN0Fic0J1d0d4Z2J1QnV3RzdBYndCdG9Hc2diMEJ2UUc5Z2I0QnZvRy9BYitCc0FIQWdjRUJ3WUhDQWNLQnd3SERnY1FCd0lIQkFjU0J4UUhGZ2NZQnhvSEhBY2VCd1FISUFjaUJ5UUhEQWNtQnlnSEFnY0VCeW9ITEFjdUJ3d0hNQWN5QnpRSE5nYzRCem9IUEFjWUJ6NEhBQWRDQjBRSEJBZEdCMGdIVEFjS0Iwd0hRZ2RFQnc0SFVBZFNCMHdIRkFkTUIwSUhkQWJXQjFnSFdnZE1CeHdIWGdkZ0IzUUc0Z2RrQjJZSFdBY29CMm9IZEFiMEJ1d0hiZ2R3QjJ3RzdBYnlCM1FIZGdkNEIzb0hmQWRzQnV3Ry9nZEFCNElIaEFlR0I3UUd5QWVLQjR3SGpnZWFCcEFIa2dlVUI2d0c3QWIwQnZRRzFnZVlCNW9IbkFlZUI2QUhvZ2VrQjZ3R2JBWm1CN1FHOUFib0I3UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWJxQjZ3SHRBYjBCdW9IdEFiMEJ1NEhzQWV5QjdRRzlBYjBCdkFIdEFiMEJ2UUc5QWUyQjdnSHRBYjZCNndHYkFac0Jtd0diQVo4Qjc0SHRBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHd0FmMEJzSUh4QWYwQnZRRzlBYjBCc1lIeUFmS0I4d0g5QWJPQi9RRzBBZktCOUlIOUFiMEJ2UUcxQWZXQjlnSDJnZmNCOTRIMmdmMEJ2UUc0QWYwQnZRRzRnZjBCdlFHNUFmMEJ2UUc5QWIwQnVZSDlBYm9CK29IN0FmdUIvUUc4QWZ5Qi9RRzlBYjBCL1FHOWdmNEIvb0grZ2YwQnZ3SDlBYjBCdlFHL2dmQUNBSUlHZ2ZhQjhRSUJnZ3NCdXdHN0Fic0JzZ0lOQWIwQnNvSURBZ2FCNDRJRUFnU0NEUUcxQWdXQ0RRRzlBYllDQm9JTkFiMEJ0d0lIZ2dnQ0JZSU5BYmlDQ3dHN0Fic0J1d0c1QWdtQ0NnSUtnZ3dCbkFHYkFndUNDNElMZ2d3Q0RJSU1BWjBDQzRJTGdnYUJwb0dtZ2EyQ0RRR2RBWjBCblFHZEFaMEJuUUdkQVowQm5nSU5BWjBCblFHZEFaMEJuUUdlZ2c4Q0RvSU9nZzhDRDRJT2dnQUNFSUlRZ2hDQ0VRSVJnaElDRW9JVEFoT0NGQUlVZ2hVQ0ZZSVdBaGFDRndJWGdoZ0NHSUlaQWhzQnVZSWFBaHFDR3dJYmdod0NISUlkQWgyQ0hnSWVBaDZDSHdJZmdoNkI4QUlnZ2k2QjhRSWhnaUlDSVlJaGdpR0NJWUloZ2lHQ0lZSWhnaUdDSVlJaGdpR0NJWUloZ2lLQ0xvSHpBaU9DSkFJa0FpUUNKSUl1Z2ZVQ0lZSWxnaTZCOWdJbWdpY0NMb0grZ2ZlQ0t3RzNBaXNCdllJZGdoZ0NLSUlrQWlRQ0pBSWtBaWtDTFlJZWdmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmNkIrWUlxQWk2Qi9vSDZnaTZCL29IK2dmNkIvb0grZ2ZzQ0xvSCtnZjZCKzRJdWdmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmNkIvQUlzZ2kyQ0hRSXVnZjZCL1lJaGdpNENJWUlrQWlRQ0pBSWtBaVFDSkFJa0FpUUNKQUlrQWlRQ0pBSWtBaVFDSkFJa0FpR0NJWUloZ2lHQ0lZSWhnaUdDSVlJdWdpOENJWUloZ2lHQ0w0SWhnaUFDTVlJaGdpR0NJWUloZ2lHQ0lZSWhnaUdDSVlJaGdpR0NJWUloZ2lHQ0lZSXVnZjZCL29IeGdpQ0NQb0grZ2ZFQ1BvSHhnajZCOGdJeWdqTUNNNEk3QWJzQm13R1VBandCbkFHVWdqVUNOWUk5QVowQm5RR2RBWjBCblFHV0FqYUNQQUdjQVpjQ1BRRzlBYjBCdDRJNEFqMEJ1SUk1QWprQ09RSTVBamFCcG9HcGdqb0NPb0k3QWp1Q093RzdBYnNCdm9IOEFqNkIvb0grZ2Y2Qi9vSDhnajZCL29IK2dmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmNkIvUUk3QWIyQ1BnSStnajhDUDRJNmdkMEJ2UUc5QWIwQnNBSlBnZTBCdlFHOUFiMEJzSUpCQWswQnZBSDZnZDBCdlFHOUFiMEJ1Z0h4Z2swQnNnSk9nZjZCL0lJOUFiUUNJb0pEQWtRQ0k0SkVBa1FDSklKREFrUUNKQUlsQWtXQ1JBSWtBaVlDUkFJa0FpUUNKQUlrQWlRQ0pBSW1na1FDSkFJa0FpUUNKQUluQWtRQ0o0Sk5BYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdVlIK2dmNkIvb0grZ2YwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdVlIN0Fic0J2UUc0QWswQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCc2dIdWdmNkIvb0gzZ2kwQnZRRzRnZ2lDVFFHNUFrc0J2UUdkQVptQ1NnSk5BWnFDVFFHOUFiMEJ2UUc3QWt1Q1JnR3NBa3lDVFFKTkFaMEJuUUdkZ2s0Q1RvSlBBaytDU3dHN0Fic0JzQUpRZ2wwQnNRSlJnbDBCdlFHOUFiSUNVb0pkQWIwQnN3SlRnbGFCOW9Ha0FsV0NEUUcwZ2wwQnRRSlZnbDBCc2dIc2diMEJ2UUcyQWxhQ1Z3SlhnbGdDWFFHOUFiaUNXUUpaZ2xvQ1hRRzZnbDBCdlFHOUFic0NXNEpjQWx5Q1hRSmRnbDRDV1FJOEFad0Jub0pmQWx3Qm5BR2NBWndCbkFHZEFiMEJ2NEpXZ2YwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnNBSnRBYkNDYlFHOUFiMEI4UUpoQW1FQ1lRSmhBbUVDWVFKaEFtRUNZUUpoQW1FQ1lRSmhBbUVDWVFKaGdtR0NZWUpoZ21HQ1lZSmhnbUdDWVlKaGdtR0NZWUpoZ21HQ1lZSmhnbTBCdlFHOUFiMEJ2UUc5QWJ3Qi9RRzlBYjBCdlFHOUFiMEJ2WUg3QWJzQnNnSmlnbU1DWTRKa0FtR0JzWUd4Z2JHQnNZR3hnYlNDWlFKbGdtR0JzWUd4Z2JHQnNZR3hnYkdCc1lHeGdiR0JzWUd4Z2JHQnNZR3hnYkdCc1lHeGdiR0JzWUd4Z2JZQ2F3R3hnYkdCc1lHeGdiYUNZWUd4Z2JjQ2F3RzdBYmVDWm9Hb0FtYUJxSUpwQW1tQ2FnSnFnbUdCc1lHeGdiR0JzWUd4Z2JHQnV3SnJnbWFCbHdHWGdaZ0JuQUpzZ20wQ2JRRzlnbTBCdWdIK0FtNkNid0p2Z21BQ2ZRRzhnZUNDZkFIOEFmc0J1d0c5QWIwQnZRRzlBYjBCdlFHOUFiSUNRUUp4Z25HQ2NnSnlnbktDY29KekFuT0NmWUkwQW5zQnV3RzBBaVFDSklKN0Fic0J1d0c3QWJzQnV3RzdBYnNCdlFHeUFlMEJ2UUc5QWJrQnhRSjFnbjBCdlFHMkFuMEJ0b0o5QWIwQnR3SjlBYmVDZlFHOUFiZ0NlSUo3QWJzQnV3R2JBWmtDZkFHY0FaMEJ2UUc5QWIwQnZBSDJnZnNCdXdHN0Fic0J1d0c5QWIwQnVJSDlBYjBCdlFHNWduc0J1d0c3QWJzQnV3RzdBYnNCdXdHN0FiMEJ2UUc5QWJpQ1BRRzVnZmlCK3dHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdWdKL0FhOEJxb0ovQWFzQ2Z3R3JnbjhCckFKOGduc0J1d0c3QWI4QnJRSi9BYTJDZndHdUFuc0J1d0c3QWJzQnZ3R3ZBYThCcm9KL0FuK0Nmd0ovQW5BQ2dJS1BBYUVDZ1lLQ0FvOEJvb0tQQWFNQ2l3RzdBYk9DandHa0FvU0Nqd0d2QWE4QnBRS1BBYVdDandHbUFvOEJwb0tIQW9zQnV3RzdBYnNCdXdHL0FhOEJyd0d2QWFlQ2l3RzdBYnNCdUFLSUFvZ0NpSUtKQW9rQ2lRS0pnb3NCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J1Z0tLZ29zQnV3RzdBYnNCdXdHN0Fic0J1d0c3QW8wQnZRRzdnb3dDaklLTkFvMkNoSUlOQWIwQnZnS09nbzBCdndLR2dmK0NqUUd3QXBDQ2tRS2RBYjBCc1lLVWdnMEJ2UUd5QXBLQ2t3S1RncFFDblFHM2djU0NsUUtiQWJzQnV3RzdBYldDbGdLV2dwMEJ2UUczQXBlQ2xvSDRBcENCd1FISUFjaUNtUUtaZ3BvQ213RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J1d0c5QWIwQnZRRzZncHNDbG9IN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0FiMEJ2UUc3Z3B3Q25JS2RBcHNCdXdHOUFiMEJ2UUc5Z3A0Q2xvSDdBYnNCdlFHOUFiNkNud0tXZ2ZzQnV3RzdBYjBCdjRLUUFxQ0Nxd0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBWnNCbkFHY0FaQ0I0UUtyQWJzQnV3RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzlBYjBCdlFHL0FvMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMkIrd0c3QWJzQnV3RzdBYnNCdmdJZUFoNENIZ0llQWg0Q0VZS2lBcTBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiQUNhd0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J1d0c3QWIwQnZRRzZBZnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J2UUc5QWIwQnZRRzRnanNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHOUFiMEJ2UUcvQW8wQnVnSDNBbHNCdXdHN0Fic0J1d0c3QWIwQnZBSHlncTBCdlFHOUFiTUNvNEtrQXFTQ3BRS3RBYnNCdXdHN0Fic0J1d0c3QWJzQnZRRzlBYjBCdlFHOGdmV0NwZ0ttZ3EyQ2h3S3JBYnNCdXdHN0Fic0J1d0czZ3FzQnV3RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0FiMEJ2UUc5QWIwQnZRRzlBYklDUWdIdkFvZ0NxSUtyQWJzQnV3RzdBYnNCdEFJa0FpUUNKQUlrQWlRQ0pBSWtBaVFDSkFJa0FpUUNKQUlrQWlRQ0tRS2tBaVFDS1lLa0FpUUNKQUlxQXFxQ3F3S2tBaXVDcEFJa0FpUUNMQUtyQWI2Qi9vSCtnZjZCL0lLckFic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0Fic0J2b0grZ2Y2Qi9vSCtnZmVDSVlKOUFxc0J1d0c3QWJzQnV3RzdBYnNCdXdHN0FaMkNyQUdlQXE2Q3J3S3VnZ3NCbjRLZ0FyQ0NzUUt4Z3JzQm5ZS3NBWklDc29LOEFaTUNzNEswQXJTQ3V3R1ZBcndCbXdHZGdxd0JuZ0t1Z3F3Qm5vSUxBWitDcElLN0FaVUN2QUdiQVoyQ3JBR1ZncnNCbGdLMmdyY0N0NEs4QVpnQ3V3R1lncmtDdVlLNkFyd0Jtb0s3QVpzQ3ZBR2JncndDdkFLOEFyYUJwb0dtZ2F5Q3RvR21nYTBDdllLK0FyNkN2WUdyQWJzQnV3RzdBYnNCdndHdkFhOEJyd0d2QWE4QnJ3R3ZBYThCcndHdkFhOEJyd0svZ3JzQnV3R3dBc0dCc0lMQkFzR0N3Z0xDZ3NNQ3c0TEVBc1NDeEFMTEFic0J1d0cxQXM2Qi9vSDlnajZCL29IK2dmNkIvb0grZ2Z5Q05ZTEdBc1lDeGdMT2dmMENOb0xFQWlZQ1JBSWtBaVFDSndMRUFpUUNKNExMQWJzQnV3RzdBYmdDeEFJb2dzUUNKQUluZ3N3Q3FRTExBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYjZCL29IK2dmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmNkIvb0grZ2ZtQ3pvSCtnZjZCL29IK2dmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmd0NQb0grZ2ZvQ3pvSCtnZjZCL29IK2dmNkIvb0grZ2Y2Qi9vSCtnZjZCL29IK2dmNkIvb0grZ2Y2QjlBSjZnc3lDUG9IK2dmNkIvb0grZ2Y2Qi9vSDhnajZCL29IK2dmNkIvb0g3QXNzQnV3RzlnajZCL29IK2dmdUN6b0h1Z2Y2Qis0TE9nZndDeXdHN0Fic0J1d0c3QWJzQnZJTExBYnNCdXdHN0Fic0J1d0c3QXNzQnV3RzdBYlFDZXdHN0Fic0J2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzRnanNCdXdHOUFiMEJ2UUc4Z2YwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdkFIOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzlBYjBCdlFHOUFiMEJ2UUc5QWIwQnZRRzNncXNCdXdHN0Fic0J1d0c5QWJ3Qit3RzdBYnNCdXdHN0Fic0J1d0c3QWJzQnV3RzdBYnNCdXdHN0FiMEN5d0c5Z3MyQ3pZTE5nczJDellMTEFic0J1d0c3QWJzQnV3RzdBYnNCdG9HbWdhYUJwb0dtZ2FhQnBvR21nYWFCcG9HbWdhYUJwb0dtZ2FhQnF3R3hnbUdDWVlKaGdtR0NZWUpoZ21HQ1lZSmhnbUdDWVlKaGdtR0NZWUp1QXNBUUVCQVFFQkFRRUJBZ01DQkFNQkFRRUJBUUVCQVFFQkFRRUJBUU1EQXdJRkJnWUhDQWNHQmdrS0Jnc01EUXdNRGc0T0RnNE9EZzRPRGd3R0R3OFBCZ1lRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQWtHQ2hFU0VSTVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1URXhNVENROEtEd0VCQVFFQkFRTUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFSUUdDQWdJQ0JVR0VSVVdGdzhZRlJFWkdoc2JFUk1HQmhFYkZod2RIUjBHRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVBFQkFRRUJBUUVCTVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1URXc4VEV4TVRFeE1URXhBVEVCTVFFeEFURUJNUUV4QVRFQk1RRXhBVEVCTVFFeE1RRXhBVEVCTVFFeEFURUJNUUV4QVRFeEFURUJNUUV4QVRFQk1RRXhBVEVCQVRFQk1RRXhNVEVCQVRFQk1RRUJNUUVCQVRFeEFRRUJBVEVCQVRFQkFRRXhNVEVCQVRFQkFURUJNUUV4QVFFeEFURXhBVEVCQVRFQkFRRXhBVEVCQVRFeFlRRXhNVEZoWVdGaEFlRXhBZUV4QWVFeEFURUJNUUV4QVRFQk1RRXhBVEVCTVRFQk1URUI0VEVCTVFFQkFURUJNUUV4QVRFQk1RRXhNVEV4TVRFeEFRRXhBUUV4TVFFeEFRRUJBVEVCTVFFeEFURUJNVEV4TVRGaE1URXhNVEV4TVRFeE1USHg4Zkh4OGZIeDhmSUNBZkh4OGZIeDhmRVJFUkVTQWdJQ0FnSUNBZ0lDQWZIeEVSRVJFUkVSRVJFUkVSRVJFUkh4OGZIeDhSRVJFUkVSRVJJQkVmRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVoSVNFaElTRWhJU0VoSVNFaElTRWhFQk1RRXlBUkVCTUFBQjhURXhNR0VBQUFBQUFSRVJBR0VCQVFBQkFBRUJBVEVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBQUVCQVFFQkFRRUJBUUV4TVRFeE1URXhNVEV4TVRFeE1URXhNVEV4QVRFeEFRRUJNVEV4QVRFQk1RRXhBVEV4TVRFeEFURHhBVEVCQVRFeEFRRUJBVElpRWhJU0VoSXlNUUV4QVRFQk1RRUJNUUV4QVRFQk1RRXhBVEVCTVRBQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBQUFCOGtKQ1FrSkNRQUV4TVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1BSkNVQUFCVVZDQUFoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoSVNZaEp5RWhKeUVoSnlFQUFBQUFBQUFBQUNnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0FBQUFBQUFLQ2dvSnljQUFBQUFBQUFBQUFBQUFDa3BLU2twS1E4UEtnY0hLd3dzRlJVaElTRWhJU0VoSVNFaElTd3RBQ3dzTGk0dUxpNHVMaTR1TGk0dUxpNHVMaTh1TGk0dUxpNHVMaTR1SVNFaElTRXdNREF3TURBd01EQXdCekV4TEM0dUlTNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpNHNMaUVoSVNFaElTRXBGU0VoSVNFaElTOHZJU0VWSVNFaElTNHVEZzRPRGc0T0RnNE9EaTR1TGpJeUxpd3NMQ3dzTEN3c0xDd3NMQ3dzQUMwdUlTNHVMaTR1TGk0dUxpNHVMaTR1SVNFaElTRWhJU0VoSVNFQUFDNHVMaTR1TGk0dUxpRWhJU0VoSVNFaElTRWhMZ0FBQUFBQUFBQUFBQUFBQUFBQU16TXpNek16TXpNek15Z29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0lTRWhJU0VoSVNFaE5EUVZCZ1lHTkFBQUFBQUFLQ2dvS0Nnb0lTRWhJVFFoSVNFaElTRWhJU0UwSVNFaE5DRWhJU0VoQUFBbkp5Y25KeWNuSnljbkp5Y25KeWNBS0Nnb0tDZ29LQ2dvSVNFaEFBQW5BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXVMaTR1TGdBQUFBQUFBQUFBQUFBQUFBQUFJU0VoSVNFaElTRWhJU0VoSVNFaElUVVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaUUxSVJZMU5UVWhJU0VoSVNFaElUVTFOVFVoTlRVV0lTRWhJU0VoSVJZV0ZoWVdGaFlXRmhZaElTUWtOalkyTmpZMk5qWTJOaVFmRmhZV0ZoWVdGaFlXRmhZV0ZoWVdJVFUxQUJZV0ZoWVdGaFlXQUFBV0ZnQUFGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmdBV0ZoWVdGaFlXQUJZQUFBQVdGaFlXQUFBaEZqVTFOU0VoSVNFQUFEVTFBQUExTlNFV0FBQUFBQUFBQUFBMUFBQUFBQllXQUJZV0ZpRWhBQUEyTmpZMk5qWTJOalkyRmhZSUNEYzNOemMzTnlJSUFBQUFBQUFoSVRVQUZoWVdGaFlXQUFBQUFCWVdBQllXQUJZV0FCWVdBQUFoQURVMU5TRWhBQUFBQUNFaEFBQWhJU0VBQUFBaEFBQUFBQUFBQUJZV0ZoWUFGZ0FBQUFBQUFBQTJOalkyTmpZMk5qWTJJU0VXRmhZaEFBQUFBQUFBQUFBQUFBQWhJVFVBRmhZV0ZoWVdGaFlXQUJZV0ZnQVdGaFlXRmhZV0ZoWVdGaFlXRmdBV0ZnQVdGaFlXRmdBQUlSWTFOVFVoSVNFaElRQWhJVFVBTlRVaEFBQVdBQUFBQUFBQUFBQUFBQUFBQUFBQUpBZ0FBQUFBQUFBQUZnQUFBQUFBQUFBaE5UVUFGaFlXRmhZV0ZoWUFBQllXQUJZV0FCWVdGaFlXQUFBaEZqVWhOU0VoSVNFQUFEVTFBQUExTlNFQUFBQUFBQUFBQUNFMUFBQUFBQllXQUJZaUZqYzNOemMzTndBQUFBQUFBQUFBQUFBaEZnQVdGaFlXRmhZQUFBQVdGaFlBRmhZV0ZnQUFBQllXQUJZQUZoWUFBQUFXRmdBQUFCWVdGZ0FBQUJZV0ZoWVdGaFlXRmhZV0ZnQUFBQUExTlNFMU5RQUFBRFUxTlFBMU5UVWhBQUFXQUFBQUFBQUFOUUFBQUFBQUFBQUFOemMzRlJVVkZSVVZDQlVBQUFBQUFDRTFOVFVBRmhZV0ZoWVdGaFlBRmhZV0FCWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmdBQUFCWWhJU0UxTlRVMUFDRWhJUUFoSVNFaEFBQUFBQUFBQUNFaEFCWVdGZ0FBQUFBQUFBQUFBQUFBQUFBZEhSMGRIUjBkSWdBaE5UVUFGaFlXRmhZV0ZoWUFGaFlXRmhZV0FCWVdGaFlXQUFBaEZqVTROVFUxTlRVQU9EVTFBRFUxSVNFQUFBQUFBQUFBTlRVQUFBQUFBQUFBRmdBQUZoWUFBQUFBQUFBQUFBQUFBQUFBRmhZV0ZoWVdGaFlXRmhZQUFCWTFOVFVoSVNFaEFEVTFOUUExTlRVaEZnQUFBQUFBQUFBQU5RQUFBQUFBQUFBV056YzNOemMzQUFBQUloWVdGaFlXRmdBQU5UVUFGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdBQUFBRmhZV0ZoWVdGaFlBRmhZV0ZoWVdGaFlXQUJZQUFCWVdGaFlXRmhZQUFBQWhBQUFBQURVMU5TRWhJUUFoQURVMU5UVTFOVFUxQUFBMU5TUUFBQUFBQUFBQUFBQUFBQUFXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdJUllXSVNFaElTRWhJUUFBQUFBSUZoWVdGaFlXSHlFaElTRWhJU0VoSkRZMk5qWTJOalkyTmpZa0pBQUFBQUFBRmhZQUZnQUFGaFlBRmdBQUZnQUFBQUFBQUJZV0ZoWUFGaFlXRmhZV0ZnQVdGaFlBRmdBV0FBQVdGZ0FXRmhZV0lSWVdJU0VoSVNFaEFDRWhGZ0FBRmhZV0ZoWUFId0FoSVNFaElTRUFBRFkyTmpZMk5qWTJOallBQUJZV0ZoWVdJaUlpSkNRa0pDUWtKQ1FrSkNRa0pDUWtJaVFpSWlJaElTSWlJaUlpSWpZMk5qWTJOalkyTmpZM056YzNOemMzTnpjM0lpRWlJU0loQ1FvSkNqVTFGaFlXRmhZV0ZoWUFGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlBQUFBQUlTRWhJU0VoSVNFaElTRWhJU0UxSVNFaElTRWtJU0VXRmhZV0ZpRWhJU0VoSVNFaElTRWhBQ0VoSVNFaElTRWhJU0VoSVNFaElTRWhJU0VoQUNJaUlpSWlJaUlpSVNJaUlpSWlJZ0FpSWlRa0pDUWtJaUlpSWlRa0FBQUFBQUFXRmhZV0ZoWVdGaFlXRmpVMUlTRWhJVFVoSVNFaElTRTFJU0UxTlNFaEZqWTJOalkyTmpZMk5qWWtKQ1FrSkNRV0ZoWVdGaFkxTlNFaEZoWVdGaUVoSVJZMU5UVVdGalUxTlRVMU5UVVdGaFloSVNFaEZoWVdGaFlXRmhZV0ZoWVdGaUUxTlNFaE5UVTFOVFUxSVJZMU5qWTJOalkyTmpZMk5qVTFOU0VpSWhBUUVCQVFFQUFRQUFBQUFBQVFBQUFXRmhZV0ZoWVdGaFlXRmlRZkZoWVdGaFlXRmhZV0ZoWVdBQllXRmhZQUFCWVdGaFlXRmhZQUZnQVdGaFlXQUFBV0FCWVdGaFlBQUJZV0ZoWVdGaFlBRmdBV0ZoWVdBQUFXRmhZV0ZoWVdGaFlXRmhZV0ZoWUFGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGZ0FBSVNFaEpDUWtKQ1FrSkNRa056YzNOemMzTnpjM056YzNOemMzTnpjM056Y0FBQUFWRlJVVkZSVVZGUlVWQUFBQUFBQUFFQkFRRUJBUUFBQVRFeE1URXhNQUFDVVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdKQ1FXQlJZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXQ1FvQUFBQVdGaFlXRmhZV0ZoWVdGaVFrSkRrNU9SWVdGaFlXRmhZV0FBQUFBQUFBQUJZV0ZoWVdGaFlXRmhZV0ZoWUFGaFlXRmlFaElRQUFBQUFBQUFBQUFBQUFGaFloSVNFa0pBQUFBQUFBQUFBQUFCWVdJU0VBQUFBQUFBQUFBQUFBQUFBV0FDRWhBQUFBQUFBQUFBQUFBQUFBRmhZV0ZpRWhOU0VoSVNFaElTRTFOVFUxTlRVMU5TRTFOU0VoSVNFaElTRWhJU0VoSkNRa0h5UWtKQWdXSVFBQU5qWTJOalkyTmpZMk5nQUFBQUFBQUIwZEhSMGRIUjBkSFIwQUFBQUFBQUFHQmdZR0JnWWxCZ1lHQmlFaElSZ0FGaFlXSHhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0FBQUFBQUFBQUFBV0ZoWVdGaFlXRmhZaEZnQUFBQUFBRmhZV0ZoWVdBQUFBQUFBQUFBQUFBQllXRmhZV0ZoWVdGaFlXRmhZV0ZnQWhJU0UxTlRVMUlTRTFOVFVBQUFBQU5UVWhOVFUxTlRVMUlTRWhBQUFBQUJVQUFBQUdCalkyTmpZMk5qWTJOallXRmhZV0ZoWVdGaFlXRmhZV0ZnQUFGaFlXRmhZQUFBQUFBQUFBQUFBQUFCWVdGaFlXRmhZV0ZoWVdGZ0FBQUFBV0ZoWVdGaFlXRmhZV0FBQUFBQUFBTmpZMk5qWTJOalkyTmpjQUFBQVZGUlVWRlJVVkZSVVZGUlVWRlJVVkZSVVdGaFlXRmhZV0lTRTFOU0VBQUNRa0ZoWVdGaFkxSVRVaElTRWhJU0VoQUNFMUlUVTFJU0VoSVNFaElTRTFOVFUxTlRVaElTRWhJU0VoSVNFaEFBQWhKQ1FrSkNRa0pCOGtKQ1FrSkNRQUFDRWhJU0VoSVNFaElTRWhJU0VoSXdBaElTRWhOUllXRmhZV0ZoWVdGaFlXRmhZV0ZpRTFJU0VoSVNFMUlUVTFOVFUxSVRVMUZoWVdGaFlXRmdBQUFBQWtJaUlpSWlJaUlpSWlJaUVoSVNFaElTRWhJU0lpSWlJaUlpSWlJZ0FBQUNFaE5SWVdGaFlXRmhZV0ZoWVdGaFlXTlNFaElTRTFOU0VoTlNFaElSWVdOalkyTmpZMk5qWTJOaFlXRmhZV0ZoWVdGaFlXRmlFMUlTRTFOVFVoTlNFaElUVTFBQUFBQUFBQUFBQWtKQ1FrRmhZV0ZqVTFOVFUxTlRVMUlTRWhJU0VoSVNFMU5TRWhBQUFBSkNRa0pDUTJOalkyTmpZMk5qWTJBQUFBRmhZV0ZoWVdGaFlXRmhZZkh4OGZIeDhrSkNRa0pDUWtKQ1FrQUFBQUFBQUFBQUFoSVNFa0lTRWhJU0VoSVNFaElTRWhJVFVoSVNFaElTRWhGaFlXRmlFV0ZoWVdOVFVoRmhZQUlTRUFBQUFBQUFBVEV4TVRFeE1URXhNVEV4TWZIeDhmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmRXhNVEV4TVRFeE1URXhNVEV4OFRFeE1URXhNVEV4TVRFeE1URXhNVEV4TWZIeDhmSHlFaElTRWhJUUFBQUFBQUFDRWhJU0VRRXhBVEVCTVRFeE1URXhNVEV4QVRFeE1URXhNVEV4TVFFQkFRRUJBUUVCTVRFeE1URXdBQUVCQVFFQkFRQUFBVEV4TVRFeE1URXdBUUFCQUFFQUFRRXhNVEV4TVRFeE1URXhNVEV4TUFBQk1URXhNVEV4TVRIaDRlSGg0ZUhoNFRFeE1URXdBVEV4QVFFQkFlRVJNUkVSRVRFeE1BRXhNUUVCQVFIaEVSRVJNVEV4TUFBQk1URUJBUUVBQVJFUkVURXhNVEV4TVRFeEFRRUJBUUVSRVJBQUFURXhNQUV4TVFFQkFRSGhFUkFBVUZCUVVGQlFVRkJRVUZHQmdZT2pzbEpTVWxKU1VHQmhjY0NSY1hIQWtYQmdZR0JnWUdCZ1k4UFQ0L1FFRkNGQWNIQndjSEJnWUdCaGNjQmdZR0JoSVNCZ1lHUXdrS0JnWUdCZ1lHQmdZR0JnWVBCaElHQmdZR0JnWUdCZ1lHQlJnWUdCZ1lBRVJGUmtjWUdCZ1lHQmdiSHdBQUd4c2JHeHNiQ3dzUENRb2ZHeHNiR3hzYkd4c2JHd3NMRHdrS0FCOGZIeDhmSHg4Zkh4OGZIeDhBQUFBSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBQ0VoSVNFaElTRWhJU0VoSVNFakl5TWpJU01qSXlFaElTRWhJU0VoSVNFaElRQUFBQUFBQUFBQUFBQUFBQUFBQUJVVkVCVVZGUlVRRlJVVEVCQVFFeE1RRUJBVEZSQVZGUThRRUJBUUVCVVZGUlVWRlJBVkVCVVFGUkFRRUJBWkV4QVFFQkFURmhZV0ZoTVZGUk1URUJBUER3OFBEeEFURXhNVEZROFZGUk1pSFIwZEhSMGRIUjBkSFIwZEhSMGRIVGs1T1RrNU9UazVPVGs1T1RrNU9UazVPVGtRRXprNU9Ua2RGUlVBQUFBQUR3OFBEdzhWRlJVVkZROFBGUlVWRlE4VkZROFZGUThWRlJVVkZSVVZEeFVWRlJVVkZSVVZGUlVWRlJVVkZROFBGUlVQRlE4VkZSVVZGUlVWRlJVVkZSVVZGUlVQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4TEdnOFBEdzhQRHc4UER3OFBEeFVWRlJVVkZSVVZDUW9KQ2hVVkZSVVBEeFVWRlJVVkZSVUpDaFVWRlJVVkZSVVZGUlVWSWlJaUlpSWlJaUlpSWlJaUlpSWlJaUlpSWlJaUlpSWlJaUlpSWlJaUlpSWlJaUlpSWhVUEZSVVZGUlVWRlJVaUZSVVZGUlVQRHc4UER3OFBEdzhWRlJVVkZSVVZGUlVWRlJVVkZSVVZGUlVWRlJVVkZSVVBEdzhQRHc4VkZSVVZGUlVWRlJVVkZSVVZGUlVWRlJVVkZSVVZGUlVWQUFBQUFBQVZGUlVWRlJVVkFBQUFBQUFBQUFBQUhSMGRIUjBkSFIwYkd4c2JHeHNiR3hzYkd4c2JHeHNiR3hzYkd5SWlJaUlpSWlJaUlpSWlJaUlpSFIwZEhSMGRGUlVWRlJVVkZROFZGUlVWRlJVVkZSVVBGUlVWRlJVVkZSVVZGUlVWRlJVVkZSVVZGUlVWRlE4UER3OFBEdzhQRlJVVkZSVVZGUlVWRlJVVkZSVVZEeFVWRlJVVkZSVVZGUlVWRlNJVkZSVVZGUlVWRlJVVkZRa0tDUW9KQ2drS0NRb0pDZ2tLSFIwZEhSMGRIUjBkSFIwZEhSMFZGUlVWRlJVVkZSVVZGUlVQRHc4UER3a0tEdzhQRHc4UER3OFBEdzhQRHc4UENRb0pDZ2tLQ1FvSkNnOFBEd2tLQ1FvSkNna0tDUW9KQ2drS0NRb0pDZ2tLQ1FvUER3OFBEdzhQRHc4UER3OFBEdzhKQ2drS0R3OFBEdzhQRHc4UER3OFBEdzhQRHdrS0R3OFBEdzhQRHhVVkR3OFBEdzhQRlJVVkZSVVZGUUFBRlJVVkZSVVZGUlVWRlJVVkZSVVZGUUFBRlJVVkZSVVZGUlVWRlJVVkZSVVZGUlVWQUFBQUZSVVZGUlVWRlJVVkZSVVZBQlVWRlJVVkZSVVZBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVZGUlVWRUJBUUVCQVFFQkFRRUJBUUVCQVFBQk1URXhNVEV4TVRFeE1URXhNVEV3QVFFeEFRRUJNVEVCTVFFeEFURUJBUUVCTVFFeE1RRXhNVEV4TVRIeDhRRUJBVEVCTVRGUlVWRlJVVkVCTVFFeUVoSVJBVEFBQUFBQUFHQmdZR0hRWUdFeE1URXhNVEFCTUFBQUFBQUJNQUFCWVdGaFlXRmhZV0FBQUFBQUFBQUI4a0FBQUFBQUFBQUFBQUFBQUFBQUFoRmhZV0ZoWVdGZ0FBQUFBQUFBQUFBQllXRmhZV0ZoWUFGaFlXRmhZV0ZnQUdCaGNjRnh3R0JnWVhIQVlYSEFZR0JnWUdCZ1lHQmlVR0JpVUdGeHdHQmhjY0NRb0pDZ2tLQ1FvR0JnWUdCaUFHQmdZR0JnWUdCZ1lHSlNVR0JnWUdKUVlKQUFBQUFBQUFBQUFBQUFBQUFCVVZGUlVWRlJVVkZSVUFGUlVWRlJVVkZSVVZBQUFBQUFBQUFBQUFBQUFBRlJVVkZSVVZBQUFBQUFBQUFBQUFBQlVWRlJVVkZSVVZGUlVWRlFBQUFBQUZCZ1lHRlI4V09Ra0tDUW9KQ2drS0NRb1ZGUWtLQ1FvSkNna0tKUWtLQ2hVNU9UazVPVGs1T1RraElTRWhOVFVsSHg4Zkh4OFZGVGs1T1I4V0JoVVZGaFlXRmhZV0ZnQUFJU0VSRVI4ZkZoWVdGaFlXRmhZV0ZoWVdCaDhmSHhZQUFBQUFBQllXRmhZV0ZoWVdGaFlXSWlJM056YzNJaUlpSWlJaUlpSWlJaFlXRmhZV0ZoWVdGaFlXQUFBQUFBQWlJaUlpSWlJaUlpSWlJaUlpRlJVQU56YzNOemMzTnpjM055SWlJaUlpSWlJaUlpSWlJaUlpTnpjM056YzNOemNWSFIwZEhSMGRIUjBkSFIwZEhSMGRJaUlpSWlJaUlpSWlJaUlpRlJVVklpSWRIUjBkSFIwZEhSMGRIUjBkSFIwaUlpSWlJaUlpSWlJaUlpSVZGUlVWSWlJaUlpSWlJaUlpSWlJaUlpSWlBQ0lpSWlJaUlpSVZGUlVWSWlJaUlpSWlJaUlpSWlJaUlpSWlJaUlpSWhVVklpSWlJaUlpSWlJaUlpSWlJaUlpRlJZV0ZoWVdIeFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZZkJnWUdOalkyTmpZMk5qWTJOaFlXQUFBQUFCQVRFQk1RRXhBVEVCTVFFeEFURmlFakl5TUdJU0VoSVNFaElTRWhJUVlnRUJNUUV4QVRFQk1RRXhBVEh4OGhJUllXRmhZV0ZqazVPVGs1T1RrNU9Ua2hJU1FrSkNRa0pBQUFBQUFBQUFBQUVSRVJFUkVSRVNBZ0lDQWdJQ0FnSUJFUkVCTVFFeEFURUJNUUV4QVRFQk1URXhBVEVCTVFFeEFURUJNUUV4QVRIeE1URXhNVEV4TVRFQk1RRXhBUUV4QVRFQk1RRXhBVElFaElFQk1RRXhZUUV4QVRFeE1RRXhBVEVCTVFFeEFURUJNUUV4QVRFQk1RRXhBUUVCQUFBQkFRRUJBUUV4QVRBQUFBQUFBQUFBQUFBQUFBQUFBQUZoOGZFeFlXRmhZV0ZoWWhGaFlXSVJZV0ZoWWhGaFlXRmhZV0ZqVTFJU0UxRlJVVkZRQUFBQUEzTnpjM056Y2lJZ2daQUFBQUFBQUFGaFlXRmdZR0JnWUFBQUFBQUFBQUFEVTFGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdOVFUxTlRVMU5UVTFOVFUxTlRVMU5TRUFBQUFBQUFBQUFBQWtKQ0VoRmhZV0ZoWVdKQ1FrRmlRV0FBQVdGaFlXRmhZaElTRWhJU0VoSVNRa0ZoWVdGaFlXRmlFaElTRWhJU0VoSVNFaE5UVUFBQUFBQUFBQUFBQUFBQ1FXRmhZaE5UVWhJU0VoTlRVaE5UVTFOU1FrSkNRa0pDUWtKQ1FrSkNRQUh6WTJOalkyTmpZMk5qWUFBQUFBSkNRV0ZoWVdGaUVmRmhZV0ZoWVdGaFlXTmpZMk5qWTJOalkyTmhZV0ZoWVdBQllXRmhZV0ZoWVdGaUVoSVNFaElUVTFJU0UxTlNFaEFBQUFBQUFBQUFBQUZoWVdJUllXRmhZV0ZoWVdJVFVBQURZMk5qWTJOalkyTmpZQUFDUWtKQ1FmRmhZV0ZoWVdJaUlpRmpVaE5SWVdJUlloSVNFV0ZpRWhGaFlXRmhZaElSWWhGZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCWVdIeVFrRmhZV0ZoWVdGaFlXRmhZMUlTRTFOU1FrRmg4Zk5TRUFBQUFBQUFBQUFBQUFGaFlXRmhZV0FBQVdGaFlXRmhZQUFCWVdGaFlXRmdBQUFBQUFBQUFBQUJNVEV4TVRFeE1URXhNVFNCOGZIeDhURXhNVEV4TUFBQUFBQUFBQUFBQUFGaFlXTlRVaE5UVWhOVFVrTlNFQUFCWVdGaFlBQUFBQUFBQUFBQUFBQUFBV0ZoWVdGaFlXQUFBQUFCWVdGaFlXU1VsSlNVbEpTVWxKU1VsSlNVbEpTVXBLU2twS1NrcEtTa3BLU2twS1Nrb1RFeE1URXhNVEFBQUFBQUFBQUFBQUFBQUFFeE1URXhNQUFBQUFBQ2doS0Nnb0tDZ29LQ2dvS0Fzb0tDZ29LQ2dvS0Nnb0tDZ29BQ2dvS0Nnb0FDZ0FLQ2dBS0NnQUtDZ29LQ2dvS0Nnb0tDNHVTMHRMUzB0TFMwdExTMHRMUzB0TFN3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUNna0FBQzR1TGk0dUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0QUFBQUFBQUFBQUM0dUxpNHVMaTR1TGk0dUxpc1ZBQUFHQmdZR0JnWUdDUW9HQUFBQUFBQUFCaVVsRWhJSkNna0tDUW9KQ2drS0NRb0pDZ2tLQmdZSkNnWUdCZ1lTRWhJTUJnd0FCZ3dHQmlVSkNna0tDUW9IQmdZTERROFBEd0FHQ0FjR0FBQUFBQzR1TGk0dUFDNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpNHVMaTR1QUFBWUFBWUdCd2dIQmdZSkNnWUxEQTBNREJNVEV4TVRFeE1URXhNVENROEtEd2tLQmdrS0JnWVdGaFlXRmhZV0ZoWVdIeFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXSHg4QUFCWVdGaFlXRmdBQUZoWVdGaFlXQUFBV0ZoWVdGaFlBQUJZV0ZnQUFBQWdJRHhFVkNBZ0FGUThQRHc4VkZRQUFBQUFBQUFBQUFBQk1URXdWRlFBQUZoWVdGaFlXRmhZV0ZoWVdBQllXRmhZV0ZoWVdGaFlXRmhZV0FCWVdBQllrQmlRQUFBQUFOemMzTnpjM056YzNOemMzTnpjM056YzNOemMzTnpjM056YzNOemNBQUFBaUlpSWlJaUlpSWlKTlRVMU5UVTFOVFUxTlRVMU5UVTFOVFUxTlRVMGRIUjBkRlJVVkZSVVZGUlVWRlJVVkZSVVZGUlVkSFJVQUFBQVZBQUFBQUFBQUFBQUFBQUFBQUFBQUlpSWlJaUlpSWlJaUlpSWlJaUVBQUNFYkd4c2JHeHNiR3hzYkd4c2JHeHNiR3hzYkd4c2JHeHNiR3hzQUFBQUFOemMzTndBQUFBQUFBQUFBQUFBQUFCWTVGaFlXRmhZV0ZoWTVBQUFBQUFBV0ZoWVdGaFloSVNFaElRQUFBQUFBRmhZV0ZoWVdGaFlXRmhZV0ZoWUFKQllXRmhZQUFBQUFGaFlXRmhZV0ZoWWtPVGs1T1RrQUFBQUFBQUFBQUFBQUVCQVFFQkFRRUJBVEV4TVRFeE1URXhZV0ZoWUFBQUFBQUFBQUFBQUFBQ1FvS0Nnb0tDZ0FBQ2dBS0Nnb0tDZ29LQ2dvS0Nnb0FDZ29BQUFBS0FBQUtDZ29LQ2dvS0FBblRrNU9UazVPVGs0b0tDZ29LQ2dvVDA5T1RrNU9UazVPS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29BQUFBQUFBQUFBQk9UazVPVGs1T1RrNG9LQ2dBS0NnQUFBQUFBRTVPVGs1T0tDZ29LQ2dvVGs1T1RrNU9BQUFBQmlnb0tDZ29LQ2dvS0NnQUFBQUFBQ2NvS0Nnb0tDZ29LQUFBQUFCT1RpZ29UazVPVGs1T1RrNU9UazVPVGs1T1RnQUFUazVPVGs1T1RrNU9UazVPVGs0b0lTRWhBQ0VoQUFBQUFBQWhJU0VoS0Nnb0tBQW9LQ2dBS0Nnb0tDZ29LQ2dvS0NnQUFBQUFJU0VoQUFBQUFDRk9UazVPVGs1T1RnQUFBQUFBQUFBQUp5Y25KeWNuSnljbkFBQUFBQUFBQUNnb0tDZ29LQ2dvS0Nnb0tDaE9UaWNvS0Nnb0tDZ29LQ2dvS0Nnb1RrNU9LQ2dvS0Nnb0tDaFBLQ2dvS0Nnb0tDZ29LQ2dvSVNFQUFBQUFUazVPVGs0bkp5Y25KeWNuQUFBQUFBQUFBQUFBS0Nnb0tDZ29BQUFBQmdZR0JnWUdCaWdvS0Nnb0tBQUFUazVPVGs1T1RrNG9LQ2dBQUFBQUFFNU9UazVPVGs1T0tDZ0FBQUFBQUFBQUp5Y25Kd0FBQUFBQUFBQUFBQUFBQUU1T1RrNU9UazRvS0Nnb0tDZ29LQ2dBQUFBQUFBQUFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVQUFBQUFBQUFBQUFBQUFBQUFCUlVWRlJVVkZSVVZGUlVWRlJVVkZSVVZGUkFBQUFBQUFBQUU1T1RrNU9UbEpTVWxKU1VsSlNVbEpTVWxKU1VsSlNVbEpTVWxKU1VsSlNVbEpTVWxJQU5TRTFGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXSVNFaElTRWhJU0VoSVNFaElTRWhKQ1FrSkNRa0pBQUFBQUFkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBkSFRZMk5qWTJOalkyTmpZQUFBQUFBQUFBQUFBQUFBQUFBQUFoTlRVMUlTRWhJVFUxSVNFa0pEb2tKQ1FrQUFBQUFBQUFBQUFBQUFBQUFBQVdGaFlXRmhZV0ZoWUFBQUFBQUFBQUlTRWhGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFloSVNFaElUVWhJU0VoSVNFaElRQTJOalkyTmpZMk5qWTJKQ1FrSkFBQUFBQUFBQUFBQUFBQUFCWVdGaUVrSkJZQUFBQUFBQUFBQUFBV0ZoWTFOVFVoSVNFaElTRWhJU0UxTlJZV0ZoWWtKQ1FrSkNFaElTUUFBRFkyTmpZMk5qWTJOallXSkJZa0pDUUFOemMzTnpjM056YzNOemMzTnpjM056YzNOemNBQUFBQUFBQUFBQUFBQUJZV0ZoWVdGaFlXRmhZV0ZqVTFOU0VoSVRVMUlUVWhJU1FrSkNRa0pBQUFGaFlXRmhZV0ZnQVdBQllXRmhZQUZoWVdGaFlXRmhZV0ZoWVdGaFlXQUJZV0ZoWVdGaFlXRmhZa0FBQUFBQUFBRmhZV0ZoWVdGaFlXRmhZV0ZoWVdJVFUxTlNFaElTRWhJU0VoQUFBQUFBQWhJVFUxQUJZV0ZoWVdGaFlXQUFBV0lUVTFOVFVBQURVMUFBQTFOVFVBQUJZQUFBQUFBQUExQUFBQUFBQVdGaFlXRmpVMUFBQWhJU0VoSVNFaEFBQUFJU0VoSVNFQUFBQUFBQUFBQUFBQUFEVTFOU0VoSVNFaElUVWhOVFUxTlNFaE5TRWhGaFlrRmdBQUFBQUFBQUFBRmhZV0ZoWVdGaFlXRmhZV0ZoWVdOVFUxSVNFaElRQUFOVFUxTlNFaE5TRWhKQ1FrSkNRa0pDUWtKQ1FrSkNRa0pDUWtKQ1FrSkNRV0ZoWVdJU0VBQURVMU5TRWhJU0VoSVNFaE5UVWhOU0VoSkNRa0ZnQUFBQUFBQUFBQUFBQUFGaFlXRmhZV0ZoWVdGaFloTlNFMU5TRWhJU0VoSVRVaEFBQUFBQUFBQUFBV0ZoWVdGaFlXRmhZV0FBQUFJU0VoTlRVaElTRWhOU0VoSVNFaEFBQUFBRFkyTmpZMk5qWTJOalkzTnlRa0pDSTNOemNBQUFBQUFBQUFBQUFBQUFBV09UazVPVGs1T1RrNU9UazVPVGs1QUNRa0pDUWtBQUFBQUFBQUFBQUFBQUFoSVNFaElTUUFBQUFBQUFBQUFBQUFJU0VoSVNFaElTUWtKQ1FrSWlJaUloOGZIeDhrSWdBQUFBQUFBQUFBQUFBMk5qWTJOalkyTmpZMkFEYzNOemMzTnpjQUZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdBQUFBQUFBV0ZoWVdOVFUxTlRVMU5UVTFOVFUxTlRVMU5UVTFOVFUxTlRVMU5UVTFOVFUxTlRVMU5UVTFOVFUxTlRVMU5UVTFOUUFoSVNFZkh4OGZIeDhmSHg4Zkh4OGZGaFlBQUFBQUFBQUFBQUFBQUFBQUFCWVdGaFlXRmhZV0ZoWUFBQ0loSVNRWUdCZ1lBQUFBQUFBQUFBQUFBQUFBSWlJaUlpSWlBQUFBQUFBQUFBQUFBQ0lpSWlJaUlpSUFBQ0lpSWlJaUlpSWlJaUlpSWpVMUlTRWhJaUlpTlRVMU5UVTFHQmdZR0JnWUdCZ2hJU0VoSVNFaElTSWlJU0VoSVNFaElTSWlJaUlpSWlJaUlpSWlJaUlpSVNFaElTSWlJaUlpSWlJaUlpSWlBQUFBQUFBQUFCVVZJU0VoRlFBQUFBQUFBQUFBQUFBM053QUFBQUFBQUFBQUFBQUFBQUFBRUJBUUVCQVFFQkFRRUJNVEV4TVRFeE1URXhNUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJNVEV4TVRFeE1BRXhNVEV4TVRFeE1URXhBUUV4TVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1URXhNUUFCQVFBQUFRQUFBUUVBQUFFQkFRRUFBUUVCQVFFQkFRRUJNVEV4TUFFd0FURXhNVEV4TVRBQk1URXhNVEV4TVRFeE1URXhNVEV4QVFBQkFRRUJBQUFCQVFFQkFRRUJBUUFCQVFFQkFRRUJBQUV4TVRFeE1URXhNVEV4QVFBQkFRRUJBQUVCQVFFQkFBRUFBQUFCQVFFQkFRRUJBQUV4TVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1URXhNUUVCQVFFQkFRRUJBUUV4TVRFeE1URXhNVEV4TVRFeE1URXdBQUVCQVFFQkFRRUJBUVV4TVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1URXhNUEV4TVRFeE1URUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFRk1URXhNVEV4TVRFeE1QRXhNVEV4TVRFQkFRRUJBUUVCQVFVeE1URXhNVEV4TVRFeE1URXhNVEV4TVRFeE1URXhNVEV4TVBFeE1URXhNVEVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUZNVEV4TVRFeE1URXhNUEV4TVRFeE1URUJBUUVCQVFFQkFRVXhNVEV4TVRFeE1URXc4VEV4TVRFeE1RRXdBQURnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0lTRWhJU0VoSVNJaUlpSWhJU0VoSVNFaElTRWhJU0VoSVNFaElTRWlJaUlpSWlJaUlpRWlJaUlpSWlJaUlpSWlJaUlpSWlFaUlpUWtKQ1FrQUFBQUFBQUFBQUFBQUFBQUFBQUFJU0VoSVNFb0tDZ29LQUFBVGs1T1RrNU9UazVPSVNFaElTRWhJUUFBQUFBQUFBQUFBQzR1TGk0QUxpNHVMaTR1TGk0dUxpNEFMaTRBTGdBQUxnQXVMaTR1TGk0dUxpNHVBQzR1TGk0QUxnQXVBQUFBQUFBQUxnQUFBQUF1QUM0QUxnQXVMaTRBTGk0QUxnQUFMZ0F1QUM0QUxnQXVBQzR1QUM0QUFDNHVMaTRBTGk0dUxpNHVMZ0F1TGk0dUFDNHVMaTRBTGdBdUxpNHVMaTR1TGk0dUFDNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUFBQUFBQUF1TGk0QUxpNHVMaTRBTGk0dUxpNFBEd0FBQUFBQUFBQUFBQUFBQUFBQUZSVVZGUlVWRlJVVkZSVVZGUlVWQUFBVkZSVVZGUlVWRlJVVkZSVVZGUlViR3hzYkd4c2JHeHNiR3gwZEFBQUFJaUlpSWlJaUlpSWlJaFVWQUFBQUFDSWlJaUlpSWlJaUlpSWlBQUFBQUFBQUFBQUFBQUFpSWlJaUlpSWlJaUlpSWlJaUFBQUFBQUFBQUFBQUFBQUFBQ0lpQUFBQUFBQUFBQUFBQUFBQUFBQVZGUlVWRlJVVkZSVVZGUkVSRVJFUkZSVVZGUUFWRlJVVkZSVVZGUlVWRlJVVkZSVVZGUlVWRlJVVkZSVUFBQUFWRlJVVkZRQUFBQUFBQUFBQUFBQUFGUlVWRlJVVkZSVUFBQUFBQUFBQUFCVVZGUlVWRlJVVkZSVVZGUlVWQUFBVkZSVVZGUlVWRlJVQUFBQUFBQUFBQUJnQUFBQUFBQUFBQUFBQUFBQUFBQmdZR0JnWUdCZ1lHQmdZR0JnWUdCaEtTa3BLU2twS1NrcEtTa3BLU2dBQTd1N3U3aDBBRGc0T0VBNFBEaEVMRVJnU0dBb2FDaFFTRlJJWkNSZ01Fd2tJQ0JrU0FBQWJFaElTQVFBTERCd1NCQUFXRWc4T0hBb1pDZ29JRnhJS0VnSUFBd0FERWdVTkhBQUhEUmdBRXhJVEF4Z0RCQU1QQ3hrRUdnUVlCQThFQkFRREJBZ0xHQXNjQkFnREF3TUdBQWdBQ2dBRkFBa0FEd0FQQXd3UkRROFBBUThGRHdjUEFnOEdHUXdQRXc4VUR4VVBGaHNBRUFBUkFCc0VEeElKRWdvREhBTUFBd0VEQ2dzWkFBQVJFQkVRRVJBUkVCRVFFU0FSTUJFUUVVQVJVQkZnRVhBUmdCR1FFYUFSc0JFUUVSQVJ3QkVRRVJBUjBCSGdFZkFSQUJJUUVpQVNNQklRRVJBUkVCRkFFbEFTRUJFUUVXQVNFQkVRRVhBU0VCRVFFUkFSRUJHQUVoQVJFQkVRRVpBU29CS3dFaEFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUndCSVFFZEFTNEJMd0VnQVRFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFURUJFUUVSQVJFQkVRRWZBUkVCRWdFekFUUUJOUUV4QVJFQkVRRVdBVGNCT0FFNUFUb0JNUUViQVRFQkhBRTlBVEFCTVFFZUFURUJId0V3QVVFQlFRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUklCUVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkV3RkVBVUVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJGUUZCQVJFQkVRRVdBVUVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkZ3RkJBUkVCRVFFUkFSRUJFUUVSQVJFQkdBRkJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUmtCUVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCRVFFUkFSRUJFUUVSQVJFQkVRRVJBUkVCR2dGS0FVb0JTb0ZLQVVvQlNnRktBVW9CU2dGS0FVc0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVcUJTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVcUJTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNvRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRkxnVW9CU2dGS0FVb0JTZ0ZLQVVvQlM0Rk1BVW9CU2dGS0FVb0JTZ0ZLQVV1QlNnRktBVW9CU2dGS0FVb0JTZ0ZMZ1VvQlNnRktBVW9CU2dGS0FVb0JTNEZNZ1VvQlNnRktBVW9CU2dGS0FVdUJUUUZLQVVvQlNnRktBVW9CU2dGTGdVMkJTZ0ZLQVVvQlNnRktBVW9CUzRGS0FVb0JTZ0ZLQVVvQlNnRktBVXVCVGdGS0FVb0JTZ0ZLQVVvQlNnRkxnVW9CU2dGS0FVb0JTZ0ZLQVVxQlNnRktBVW9CU2dGS0FVb0JTZ0ZLZ1VvQlNnRktBVW9CVG9GUEFVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU29GS0FVb0JTZ0ZLQVVxQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CVDRGQUFWb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlFJRlJBVm9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLZ1VHQldnRktnVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVXVCU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVUlCV2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS2dVcUJTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVxQlNnRktBVW9CU2dGS0FVcUJTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVcUJTb0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JRb0ZUQVZvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVU9CVkFGVUFWU0JXZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRkZBVldCVmdGV2dWb0JTZ0ZLQVVvQlJ3RlhnVm9CU2dGS0FVb0JTZ0ZLQVVvQlNBRllnVmtCV2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTWUZhQVZvQlNvRmJBVm9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVdUJXZ0ZLQVVvQlNnRktBVW9CU2dGS0FVd0JXZ0ZNZ1YwQldnRktBVXdCV2dGS0FVMkJXZ0ZLQVVvQlNnRktBVW9CU29GS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JUZ0ZhQVVvQlNnRktBVTZCV2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU29GS0FVb0JTb0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktnVW9CU29GS0FVb0JTZ0ZLQVVvQlNvRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVxQlNnRktBVW9CU2dGS0FVb0JUd0ZmZ1ZvQlNnRktBVUFCYWdGQWdXb0JRUUZoZ1dJQllvRmpBV09CWkFGa2dXVUJaWUZxQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRkdBV2FCYWdGS0FVY0JhZ0ZIZ1dvQlNnRktBVW9CU2dGS0FVb0JTZ0ZJQVdvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVXFCU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGSWdXb0JTUUZxQVVvQlNZRnFBVW9CU2dGS0FVb0JhZ0ZLZ1dvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVzQmE0RnNBV3lCYlFGcUFVb0JTZ0ZLQVUyQmFnRktBVTRCYWdGT2dXb0JTZ0ZLQVVvQlNnRnFBVW9CU2dGS0FVb0JTZ0ZQQVdvQlR3RnFBVW9CVDRGcUFVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JRQUY2QVVvQlNnRktBVW9CU2dGQWdYRUJlZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRkJnWElCZWdGS0FVb0JTZ0ZLQVVvQlNnRktBVXFCU2dGS0FVb0JTNEZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLZ1VZQllvRjZBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVcUJTZ0ZLQVVvQlNnRktBVW9CU2dGS2dVb0JTZ0ZLQVVvQlNnRktBVXFCU2dGS0FVb0JTZ0ZLQVVvQlF3RjZBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlE0RjBBWFNCZFFGMWdYWUJkb0YzQVhlQmVnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTb0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU0FGNGdYb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVXVCYVFGNkFVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTWUY2QVhxQmV3RjZBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGQmdXb0JTZ0ZLQVV1QmVnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JTZ0ZLQVVvQlNnRktBVW9CU2dGS0FVb0JUQUY2QVVvQlNnRktBVW9CU2dGQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBZ01FQlFZSENBa0tBQUFBQUFBQUFBQUxEQUFBQUFBQURRQUFEZzhRQUFBQUFBQUFBQUVDQXdRRkJnY0lDUW9BQUFBQUVSSVREaEFVQUFBQUFBQUFBQUFPRHhBUkVoTUFBQUFBQUFBQUFCVVdGd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJnWkdoc1pHaHNBRlJZWERnOFFBQUFBQUFBQUFBQUFBQUVDQXdRRkJnY0lDUW9QSEIwZUh5QWhJaU1rQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURRc01KU1luS0NrcUZTc3NMUzR2TURFeUZqTUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEUTFOZ0FBQUFBQUFBQUFBQUFBQUFBQUFCZ1pHaHMzT0RrNk96d0FBQUFBQUFBQkFnTUVCUVlIQ0FrS0RRQUFBQUFBUFFBQUFDVW1KeWdwS2dBQUFBQUFBRDBOQ3d3bEppY29LU29BQUFBQUFBQStQMEJCUWtORVJVWkhTQkpKU2tzWkdSb2JOemc1T2pzOEZVeE5MaFpPRnhkUE13QUFPUzVRVVJnQUFBQUFBQUFOQ3d3bEppY29LU29WVEUxU1UxUVVORFUyS3cwTERDVW1KeWdwS2hWTVRWSlRWQlEwTlRZckRRc01KU1luS0NrcUZVeE5VbE5VRkRRMU5pc0FBQUFBQUFBQUFBQUFBQUFBQUQxTVRWSlRWQlEwTlRZckRRc01KU1luS0NrcUZUMEFBQUFBQUFBTkN3d2xKaWNvS1NvVkRRc01KU1luS0NrcUZRMExEQ1VtSnlncEtoVUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUR3QUFBQUFBQUFBQUFCZ0FBQUFBQUFBQUFBQVpHaHMzT0RrNk96d0FBQUFBQUFBQUFBQUFBQUFBQUJVckxBQUFBQUFBQUFBWkdoczNBQUFBQUFBQUFBQUFBQmthR3pjNE9UbzdQQlVBQUFBQUFBQUFBQUFBQUFBQUFCVXJMQzB1THpBeEFGVldWMWhaV2x0Y1hTeGVYMkJoWWdCalpHVm1MV2RvYVdwcmJHMXVieTRBQUFBQUFBQVpHaHMzT0RrNk96d1lEZzhRRVJJVEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHd0FBQUFBQUFBQVZBQUFBQUJvQUFBQUFBQUFBQUFBWUFBQUFBQUFBQUFBQUFBQUFBQUE1QURrQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRlFBQUFBQUFBQUFBQUJrYUd6YzRPVG83UEJVckxDMHVMekF4TWhad2NYSk9jM1IxZGhkM2VIbFBlbnQ4ZlROK2Y0QlFnWUtEaEFBQUFBQUFBQUFBQUFBQUFBNFBHVGd1VGs5UU9CVXVGazRYVHpnVkxoWk9Gek5RRlJrWkdSb2FHaG80RlJVVkZSVXNMaTR1TGhaeFRrNU9UazRYVHpndUR3OUNFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHQTRBQUFBQUFCa2FHemM0T1RvN1BCVXJMQzB1THpBeE1oWndjWEpPYzNSMWRnQUFBQUFaT0JVdUFBQUFBQUFBQUFBQUFBQUFBRElBQUFBQUFBQUFBSFlBQUFBQUFBQVpHaFVyRmdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJrYUd4VXJGaGN6QUFBQUFBQUFBQUFBR1JvYk56Z1ZLd0FBQUFBQUFBQVpHaHMzTnpnVkt4WUFBQUFBQUFBQUFBQUFBQms0RlNzV0FBQUFBQUFBR1JVckZob2JBQUFBQUFBQUFBQUFBQUFBQUFBQUFJVVBBQUFaR2hzM09EazZPendWS3l3dExpOHdBQUFXY0hGeVRuTjBkWFlYZDNoNVQzcDdmSDB6Zm4rQVVJR0NnNFJSaG9lSWlZcUxqSTJPajVDUmtwT1VsWmFYRFFzTUpSVXJGaGNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWkxnQUFBQUFBQUFBQUFBQUFBQUFBR1JVckFBQUFBQUFBQUFBWkdoczNGU3NXRndBQUFBQUFBQUFBQUJrYUd6Y1ZLeFlBQUFBQUFBQUFBQUFBR1RnVkxoWVhEUXNNSlNZbktDa3FGU3NzTFM0dk1ERXlGbkJ4Y2s1emRIVjJEdzVCUWdBQUFBMExEQ1VtSnlncEtoVXJMQzB1THpBeE1oWVhBUUlEQkFVR0J3Z0pDakF4TWhZWEFBQUFBQUFBQUFBQUFBQUJBZ01FQlFZSENBa0tGU3NBQUFBQUFRSURCQVVHQndnSkNoVXJMQzB1THpBeE1nQUFBQUFBQUFBQUFBQUFBQUFhR3pjNE9UbzdQQnMzT0RrNk96dzNPRGs2T3p3WkdoczNPRGs2T3p3WkdoczNPQm9iR3pjNE9UbzdQQmthR3hzM09KaVpHUm9iR3pjNEd4czNOemMzT1RvNk9qczdQRHc4UEJvYk56ZzVHUm9iTnpjNE9Cb2JHUnBCUWtoQlFoSU9SdzRPRDBGQ0xTNDNPRGs2T3p3QUFRSURCQVVHQndnSkNnQVZGak9hbTV5ZEFBQUFBQUFBQUFBQUFBQUFBQUF4TWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkFnTUVCUVlIQ0FrS0FRSURCQVVHQndnSkNnRUNBd1FGQmdjSUNRb0JBZ01FQlFZSENBa0tBUUlEQkFVR0J3Z0pDajA5RFFzTUpTWW5LQ2txR0JnQUFBQThBQUFBQUFBQUFBQUFBQUFBQUFBQTd1N3U3dTd1N3U3Ly93QUFBUUVDQWdNREJBUUZCUVlHQndjSUNBa0ovd0wvQS84Qi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOEUvd1gvQnY4SC93ai9DZi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzhBLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0FBQUFBQUFBQUFBQUFQQy9BQUFBQUFBQUFBQUFBQUFBQUFEd1B3QUFBQUFBQUFCQUFBQUFBQUFBQ0VBQUFBQUFBQUFRUUFBQUFBQUFBQlJBQUFBQUFBQUFHRUFBQUFBQUFBQWNRQUFBQUFBQUFDQkFBQUFBQUFBQUlrQUFBQUFBQUFBQVFBQUFBQUFBQUFoQUFBQUFBQUFBOEQ4QUFBQUFBQURRUHdBQUFBQUFBT0EvQUFBQUFBQUE2RDhBQUFBQUFBQ3dQd0FBQUFBQUFNQS9BQUFBQUFBQXlEOEFBQUFBQUFBd1FBQUFBQUFBQUNSQUFBQUFBQUFBV1VBQUFBQUFBRUNQUUFBQUFBQUFBQUFBQUFBQUFBQUE4RDhBQUFBQUFBQUFRQUFBQUFBQUFBaEFBQUFBQUFBQStEOEFBQUFBQUFBRVFBQUFBQUFBQUF4QUFBQUFBQUFBRWtBQUFBQUFBQUFXUUFBQUFBQUFBQnBBQUFBQUFBQUFIa0FBQUFBQUFBQWhRQUFBQUFBQUFPQy9BQUFBQUFBQUVFQUFBQUFBQUFBVVFBQUFBQUFBQUJoQUFBQUFBQUFBSEVBQUFBQUFBQUFnUUFBQUFBQUFBQ0pBQUFBQUFBQUFORUFBQUFBQUFBQStRQUFBQUFBQUFFUkFBQUFBQUFBQVNVQUFBQUFBQUFCT1FBQUFBQUFBZ0ZGQUFBQUFBQUFBVkVBQUFBQUFBSUJXUUFBQUFBQUFpTU5BQUFBQUFBQUFNVUFBQUFBQUFBQXlRQUFBQUFBQUFETkFBQUFBQUFBQUVFQUFBQUFBQUFBVVFBQUFBQUFBQUJoQUFBQUFBQUFBSEVBQUFBQUFBQUFnUUFBQUFBQUFBQ0pBQUFBQUFBQUFBQUNTSkVtU0pFbkNQeHpIY1J6SGNidy9tcG1abVptWnVUOVZWVlZWVlZYVlAxVlZWVlZWVmVVL21wbVptWm1aeVQrYW1abVptWm5aUHpNek16TXpNK00vbXBtWm1abVo2VDlWVlZWVlZWWEZQNnVxcXFxcXF1by9BQUFBQUFBQTJEOEFBQUFBQUFEa1B3QUFBQUFBQU93L0FBQUFBQUFBSmtBQUFBQUFBQUFvUUFBQUFBQUFRSDlBQUFBQUFBQ0lzMEFBQUFBQUFHcm9RQUFBQUFBQWF2aEFBQUFBQUFBQUtrQUFBQUFBQUFBc1FBQUFBQUFBQUM1QUFBQUFBQUFBTlVBQUFBQUFBQUEyUUFBQUFBQUFBRGRBQUFBQUFBQUFPRUFBQUFBQUFBQTVRQUFBQUFBQUFEcEFBQUFBQUFBQU8wQUFBQUFBQUFBOFFBQUFBQUFBQUQxQUFBQUFBQUFBUDBBQUFBQUFBQUJBUUFBQUFBQUFnRUJBQUFBQUFBQUFRVUFBQUFBQUFJQkJRQUFBQUFBQUFFSkFBQUFBQUFDQVFrQUFBQUFBQUFCRFFBQUFBQUFBZ0VOQUFBQUFBQUNBUkVBQUFBQUFBQUJGUUFBQUFBQUFnRVZBQUFBQUFBQUFSa0FBQUFBQUFJQkdRQUFBQUFBQUFFZEFBQUFBQUFDQVIwQUFBQUFBQUFCSVFBQUFBQUFBZ0VoQUFBQUFBQUFBYVVBQUFBQUFBTUJ5UUFBQUFBQUFBSGxBQUFBQUFBREFna0FBQUFBQUFPQ0ZRQUFBQUFBQUFJbEFBQUFBQUFBZ2pFQUFBQUFBQUVDZlFBQUFBQUFBY0tkQUFBQUFBQUJBcjBBQUFBQUFBSEMzUUFBQUFBQUFXTHRBQUFBQUFBQkF2MEFBQUFBQUFKVEJRQUFBQUFBQWlOTkFBQUFBQUFCTTNVQUFBQUFBQUlqalFBQUFBQUFBVE8xQUFBQUFBQUFYOFVBQUFBQUFBSWp6UUFBQUFBQUErZlZBVlZWVlZWVlY3VDhBQUFBQUFHb0lRUUFBQUFDQVR4SkJBQUFBQUFCcUdFRUFBQUFBZ0lRZVFRQUFBQUNBVHlKQkFBQUFBTUJjSlVFQUFBQUFBR29vUVFBQUFBQkFkeXRCVlZWVlZWVlZ0VDlWVlZWVlZWWEZQd0FBQUFBQUFOQS9WVlZWVlZWVjFUK3JxcXFxcXFyYVB3QUFBQUFBQU9BL3E2cXFxcXFxNGo5VlZWVlZWVlhsUHdBQUFBQUFBT2cvcTZxcXFxcXE2ajhBQUFBQUFGNEtRUUFBQUFBQVhocEJBQUFBQUlDRUxrRUFBQUFBaE5lWFFRQUFBQ0Jmb0FKQ0FBQUFvcFFhYlVJPSIp';
const category_data = Base64.ToByteArray(UnicodeFile);

export enum BidiCategory {
    LeftToRight = 0,
    LeftToRightEmbedding = 1,
    LeftToRightOverride = 2,
    RightToLeft = 3,
    RightToLeftArabic = 4,
    RightToLeftEmbedding = 5,
    RightToLeftOverride = 6,
    PopDirectionalFormat = 7,
    EuropeanNumber = 8,
    EuropeanNumberSeparator = 9,
    EuropeanNumberTerminator = 10,
    ArabicNumber = 11,
    CommonNumberSeparator = 12,
    NonSpacingMark = 13,
    BoundaryNeutral = 14,
    ParagraphSeparator = 15,
    SegmentSeparator = 16,
    Whitespace = 17,
    OtherNeutrals = 18,
    LeftToRightIsolate = 19,
    RightToLeftIsolate = 20,
    FirstStrongIsolate = 21,
    PopDirectionIsolate = 22,
}

export enum UnicodeCategory {
    UppercaseLetter = 0,
    LowercaseLetter = 1,
    TitlecaseLetter = 2,
    ModifierLetter = 3,
    OtherLetter = 4,
    NonSpacingMark = 5,
    SpacingCombiningMark = 6,
    EnclosingMark = 7,
    DecimalDigitNumber = 8,
    LetterNumber = 9,
    OtherNumber = 10,
    SpaceSeparator = 11,
    LineSeparator = 12,
    ParagraphSeparator = 13,
    Control = 14,
    Format = 15,
    Surrogate = 16,
    PrivateUse = 17,
    ConnectorPunctuation = 18,
    DashPunctuation = 19,
    OpenPunctuation = 20,
    ClosePunctuation = 21,
    InitialQuotePunctuation = 22,
    FinalQuotePunctuation = 23,
    OtherPunctuation = 24,
    MathSymbol = 25,
    CurrencySymbol = 26,
    ModifierSymbol = 27,
    OtherSymbol = 28,
    OtherNotAssigned = 29,
}

enum UnicodeDataHeader {
    //[FieldOffset(0)]
    TableName = 0x0,    // WCHAR[16], 2 * 16 = 32 bytes
    //[FieldOffset(0x20)]
     /* ushort */ version = 0x20,    // WORD[4] 8 bytes
    //[FieldOffset(0x28)]
   /*  internal uint */ OffsetToCategoriesIndex = 0x28, // DWORD 4 bytes
   // [FieldOffset(0x2c)]
    /* internal uint */ OffsetToCategoriesValue = 0x2c, // DWORD 4 bytes
   // [FieldOffset(0x30)]
    /* internal uint */ OffsetToNumbericIndex = 0x30, // DWORD 4 bytes
   //[FieldOffset(0x34)]
    /* internal uint */ OffsetToDigitValue = 0x34, // DWORD // 4 bytes
   // [FieldOffset(0x38)]
    /* internal uint */ OffsetToNumbericValue = 0x38 // DWORD // 4 bytes

}

export class CharUnicodeInfo {
    //--------------------------------------------------------------------//
    //                        Internal Information                        //
    //--------------------------------------------------------------------//

    //
    // Native methods to access the Unicode category data tables in charinfo.nlp.
    //
    public /* internal */ static readonly HIGH_SURROGATE_START: char = '\ud800'.charCodeAt(0);
    public /* internal */ static readonly HIGH_SURROGATE_END: char = '\udbff'.charCodeAt(0);
    public /* internal */ static readonly LOW_SURROGATE_START: char = '\udc00'.charCodeAt(0);
    public /* internal */ static readonly LOW_SURROGATE_END: char = '\udfff'.charCodeAt(0);

    public /* internal */ static readonly UNICODE_CATEGORY_OFFSET: int = 0;
    public /* internal */ static readonly BIDI_CATEGORY_OFFSET: int = 1;

    private static s_initialized: boolean = CharUnicodeInfo.InitTable();

    // The native pointer to the 12:4:4 index table of the Unicode cateogry data.
    // [SecurityCritical]
    static s_pCategoryLevel1Index: Uint16Array;
    //[SecurityCritical]
    static s_pCategoriesValue: Uint8Array;

    // The native pointer to the 12:4:4 index table of the Unicode numeric data.
    // The value of this index table is an index into the real value table stored in s_pNumericValues.
    //[SecurityCritical]
    static s_pNumericLevel1Index: Uint16Array;

    // The numeric value table, which is indexed by s_pNumericLevel1Index.
    // Every item contains the value for numeric value.
    // unsafe static double* s_pNumericValues;
    // To get around the IA64 alignment issue.  Our double data is aligned in 8-byte boundary, but loader loads the embeded table starting
    // at 4-byte boundary.  This cause a alignment issue since double is 8-byte.
    static s_pNumericValues: Uint8Array;
    // The digit value table, which is indexed by s_pNumericLevel1Index.  It shares the same indice as s_pNumericValues.
    // Every item contains the value for decimal digit/digit value.
    static s_pDigitValues: Int8Array;

    public /* internal */ static readonly UNICODE_INFO_FILE_NAME: string = "charinfo.nlp";
    // The starting codepoint for Unicode plane 1.  Plane 1 contains 0x010000 ~ 0x01ffff.
    public /* internal */ static readonly UNICODE_PLANE01_START: int = 0x10000;


    //
    // This is the header for the native data table that we load from UNICODE_INFO_FILE_NAME.
    //
    // Excplicit layout is used here since a syntax like char[16] can not be used in sequential layout.
    /*  [StructLayout(LayoutKind.Explicit)]
     internal unsafe struct UnicodeDataHeader {
     [FieldOffset(0)]
     internal char TableName;    // WCHAR[16]
     [FieldOffset(0x20)]
     internal ushort version;    // WORD[4]
     [FieldOffset(0x28)]
     internal uint OffsetToCategoriesIndex; // DWORD
     [FieldOffset(0x2c)]
     internal uint OffsetToCategoriesValue; // DWORD
     [FieldOffset(0x30)]
     internal uint OffsetToNumbericIndex; // DWORD
     [FieldOffset(0x34)]
     internal uint OffsetToDigitValue; // DWORD
     [FieldOffset(0x38)]
     internal uint OffsetToNumbericValue; // DWORD

 } */

    // NOTE: It's important to specify pack size here, since the size of the structure is 2 bytes.  Otherwise,
    // the defaul import { is } from '@tuval/core';
    //pack size will

    /* [StructLayout(LayoutKind.Sequential, Pack = 2)]
    internal struct DigitValues {
        internal sbyte decimalDigit;
        internal sbyte digit;
    }
     */

    //We need to allocate the underlying table that provides us with the information that we
    //use.  We allocate this once in the class initializer and then we don't need to worry
    //about it again.
    //

    private static InitTable(): boolean {

        // Go to native side and get pointer to the native table

        const pDataTable: Uint8Array = category_data.subarray(0, 60); //GlobalizationAssembly.GetGlobalizationResourceBytePtr(typeof (CharUnicodeInfo).Assembly, UNICODE_INFO_FILE_NAME);

        //UnicodeDataHeader * mainHeader = (UnicodeDataHeader *)pDataTable;

        // Set up the native pointer to different part of the tables.
        CharUnicodeInfo.s_pCategoryLevel1Index = new Uint16Array(pDataTable.subarray(UnicodeDataHeader.OffsetToCategoriesIndex, 4));
        CharUnicodeInfo.s_pCategoriesValue = new Uint8Array(pDataTable.subarray(UnicodeDataHeader.OffsetToCategoriesValue, 4));
        CharUnicodeInfo.s_pNumericLevel1Index = new Uint16Array(pDataTable.subarray(UnicodeDataHeader.OffsetToNumbericIndex, 4));
        CharUnicodeInfo.s_pNumericValues = new Uint8Array(pDataTable.subarray(UnicodeDataHeader.OffsetToNumbericValue, 4));
        CharUnicodeInfo.s_pDigitValues = new Int8Array(pDataTable.subarray(UnicodeDataHeader.OffsetToDigitValue, 4));

        return true;
    }


    ////////////////////////////////////////////////////////////////////////
    //
    // Actions:
    // Convert the BMP character or surrogate pointed by index to a UTF32 value.
    // This is similar to Char.ConvertToUTF32, but the difference is that
    // it does not throw exceptions when invalid surrogate characters are passed in.
    //
    // WARNING: since it doesn't throw an exception it CAN return a value
    //          in the surrogate range D800-DFFF, which are not legal unicode values.
    //
    ////////////////////////////////////////////////////////////////////////

    public /* internal */ static InternalConvertToUtf32(s: string, index: int): int {
        if (index < s.length - 1) {
            const temp1: int = s.charCodeAt(index) - CharUnicodeInfo.HIGH_SURROGATE_START;
            if (temp1 >= 0 && temp1 <= 0x3ff) {
                const temp2: int = s.charCodeAt(index + 1) - CharUnicodeInfo.LOW_SURROGATE_START;
                if (temp2 >= 0 && temp2 <= 0x3ff) {
                    // Convert the surrogate to UTF32 and get the result.
                    return ((temp1 * 0x400) + temp2 + CharUnicodeInfo.UNICODE_PLANE01_START);
                }
            }
        }
        return (s.charCodeAt(index));
    }

    ////////////////////////////////////////////////////////////////////////
    //
    // Convert a character or a surrogate pair starting at index of string s
    // to UTF32 value.
    //
    //  Parameters:
    //      s       The string
    //      index   The starting index.  It can point to a BMP character or
    //              a surrogate pair.
    //      len     The length of the string.
    //      charLength  [out]   If the index points to a BMP char, charLength
    //              will be 1.  If the index points to a surrogate pair,
    //              charLength will be 2.
    //
    // WARNING: since it doesn't throw an exception it CAN return a value
    //          in the surrogate range D800-DFFF, which are not legal unicode values.
    //
    //  Returns:
    //      The UTF32 value
    //
    ////////////////////////////////////////////////////////////////////////

    public /* internal */ static InternalConvertToUtf32_1(s: string, index: int, charLength: Out<int>): int {
        /*   Contract.Assert(s != null, "s != null");
          Contract.Assert(s.Length > 0, "s.Length > 0");
          Contract.Assert(index >= 0 && index < s.Length, "index >= 0 && index < s.Length"); */
        charLength.value = 1;
        if (index < s.length - 1) {
            const temp1: int = s.charCodeAt(index) - CharUnicodeInfo.HIGH_SURROGATE_START;
            if (temp1 >= 0 && temp1 <= 0x3ff) {
                const temp2: int = s.charCodeAt(index + 1) - CharUnicodeInfo.LOW_SURROGATE_START;
                if (temp2 >= 0 && temp2 <= 0x3ff) {
                    // Convert the surrogate to UTF32 and get the result.
                    charLength.value++;
                    return ((temp1 * 0x400) + temp2 + CharUnicodeInfo.UNICODE_PLANE01_START);
                }
            }
        }
        return s.charCodeAt(index);
    }

    ////////////////////////////////////////////////////////////////////////
    //
    //  IsWhiteSpace
    //
    //  Determines if the given character is a white space character.
    //
    ////////////////////////////////////////////////////////////////////////

    public /* internal */ static IsWhiteSpace_1(s: string, index: int): boolean {
        /*  Contract.Assert(s != null, "s!=null");
         Contract.Assert(index >= 0 && index < s.Length, "index >= 0 && index < s.Length"); */

        const uc: UnicodeCategory = CharUnicodeInfo.GetUnicodeCategory1(s, index);
        // In Unicode 3.0, U+2028 is the only character which is under the category "LineSeparator".
        // And U+2029 is th eonly character which is under the category "ParagraphSeparator".
        switch (uc) {
            case (UnicodeCategory.SpaceSeparator):
            case (UnicodeCategory.LineSeparator):
            case (UnicodeCategory.ParagraphSeparator):
                return (true);
        }
        return (false);
    }


    public /* internal */ static IsWhiteSpace(c: char): boolean {
        const uc: UnicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
        // In Unicode 3.0, U+2028 is the only character which is under the category "LineSeparator".
        // And U+2029 is th eonly character which is under the category "ParagraphSeparator".
        switch (uc) {
            case (UnicodeCategory.SpaceSeparator):
            case (UnicodeCategory.LineSeparator):
            case (UnicodeCategory.ParagraphSeparator):
                return (true);
        }

        return (false);
    }

    //
    // This is called by the public char and string, index versions
    //
    // Note that for ch in the range D800-DFFF we just treat it as any other non-numeric character
    //
    public /* internal */ /* unsafe */ static InternalGetNumericValue(ch: int): int {
        // Contract.Assert(ch >= 0 && ch <= 0x10ffff, "ch is not in valid Unicode range.");
        // Get the level 2 item from the highest 12 bit (8 - 19) of ch.
        let index: int = Convert.ToUShort(CharUnicodeInfo.s_pNumericLevel1Index[ch >> 8]);
        // Get the level 2 WORD offset from the 4 - 7 bit of ch.  This provides the base offset of the level 3 table.
        // The offset is referred to an float item in m_pNumericFloatData.
        // Note that & has the lower precedence than addition, so don't forget the parathesis.
        index = Convert.ToUShort(CharUnicodeInfo.s_pNumericLevel1Index[index + ((ch >> 4) & 0x000f)]);
        const pBytePtr: int = /* (byte *) & */ (CharUnicodeInfo.s_pNumericLevel1Index[index]);
        // Get the result from the 0 -3 bit of ch.

        return (/* (double *) */CharUnicodeInfo.s_pNumericValues)[category_data[pBytePtr + (ch & 0x000f)]];

    }

    //
    // This is called by the public char and string, index versions
    //
    // Note that for ch in the range D800-DFFF we just treat it as any other non-numeric character
    //
    //[System.Security.SecuritySafeCritical]  // auto-generated
    public /* internal unsafe */ static InternalGetDigitValues(ch: int): Int8Array {
        //Contract.Assert(ch >= 0 && ch <= 0x10ffff, "ch is not in valid Unicode range.");
        // Get the level 2 item from the highest 12 bit (8 - 19) of ch.
        let index: int = Convert.ToUShort(CharUnicodeInfo.s_pNumericLevel1Index[ch >> 8]);
        // Get the level 2 WORD offset from the 4 - 7 bit of ch.  This provides the base offset of the level 3 table.
        // The offset is referred to an float item in m_pNumericFloatData.
        // Note that & has the lower precedence than addition, so don't forget the parathesis.
        index = Convert.ToUShort(CharUnicodeInfo.s_pNumericLevel1Index[index + ((ch >> 4) & 0x000f)]);
        const pBytePtr = /* (byte *) & */ (CharUnicodeInfo.s_pNumericLevel1Index[index]);
        // Get the result from the 0 -3 bit of ch.
        return new Int8Array((CharUnicodeInfo.s_pDigitValues[category_data[pBytePtr + (ch & 0x000f)]]));
    }

    public/* internal unsafe */ static InternalGetDecimalDigitValue(ch: int): int {
        return Convert.ToInt8(CharUnicodeInfo.InternalGetDigitValues(ch)[0]);
    }


    public /* internal unsafe */ static InternalGetDigitValue(ch: int): int {
        return Convert.ToInt8(CharUnicodeInfo.InternalGetDigitValues(ch)[1]);
    }


    ////////////////////////////////////////////////////////////////////////
    //
    //Returns the numeric value associated with the character c. If the character is a fraction,
    // the return value will not be an integer. If the character does not have a numeric value, the return value is -1.
    //
    //Returns:
    //  the numeric value for the specified Unicode character.  If the character does not have a numeric value, the return value is -1.
    //Arguments:
    //      ch  a Unicode character
    //Exceptions:
    //      ArgumentNullException
    //      ArgumentOutOfRangeException
    //
    ////////////////////////////////////////////////////////////////////////


    public static GetNumericValue(ch: char): int {
        return (CharUnicodeInfo.InternalGetNumericValue(ch));
    }


    public static GetNumericValue2(s: string, index: int): int {
        if (s == null) {
            throw new ArgumentNullException("s");
        }
        if (index < 0 || index >= s.length) {
            throw new ArgumentOutOfRangeException("index", Environment.GetResourceString("ArgumentOutOfRange_Index"));
        }
        // Contract.EndContractBlock();
        return (CharUnicodeInfo.InternalGetNumericValue(CharUnicodeInfo.InternalConvertToUtf32(s, index)));

    }

    ////////////////////////////////////////////////////////////////////////
    //
    //Returns the decimal digit value associated with the character c.
    //
    // The value should be from 0 ~ 9.
    // If the character does not have a numeric value, the return value is -1.
    // From Unicode.org: Decimal Digits. Digits that can be used to form decimal-radix numbers.
    //Returns:
    //  the decimal digit value for the specified Unicode character.  If the character does not have a decimal digit value, the return value is -1.
    //Arguments:
    //      ch  a Unicode character
    //Exceptions:
    //      ArgumentNullException
    //      ArgumentOutOfRangeException
    //
    ////////////////////////////////////////////////////////////////////////


    public static GetDecimalDigitValue(ch: char): int {
        return (CharUnicodeInfo.InternalGetDecimalDigitValue(ch));
    }


    public static GetDecimalDigitValue2(s: string, index: int): int {
        if (s == null) {
            throw new ArgumentNullException("s");
        }
        if (index < 0 || index >= s.length) {
            throw new ArgumentOutOfRangeException("index", Environment.GetResourceString("ArgumentOutOfRange_Index"));
        }
        //Contract.EndContractBlock();

        return (CharUnicodeInfo.InternalGetDecimalDigitValue(CharUnicodeInfo.InternalConvertToUtf32(s, index)));
    }

    ////////////////////////////////////////////////////////////////////////
    //
    //Action: Returns the digit value associated with the character c.
    // If the character does not have a numeric value, the return value is -1.
    // From Unicode.org: If the character represents a digit, not necessarily a decimal digit,
    // the value is here. This covers digits which do not form decimal radix forms, such as the compatibility superscript digits.
    //
    // An example is: U+2460 IRCLED DIGIT ONE. This character has digit value 1, but does not have associcated decimal digit value.
    //
    //Returns:
    //  the digit value for the specified Unicode character.  If the character does not have a digit value, the return value is -1.
    //Arguments:
    //      ch  a Unicode character
    //Exceptions:
    //      ArgumentNullException
    //      ArgumentOutOfRangeException
    //
    ////////////////////////////////////////////////////////////////////////


    public static GetDigitValue(ch: char): int {
        return (CharUnicodeInfo.InternalGetDigitValue(ch));
    }


    public static GetDigitValue2(s: string, index: int): int {
        if (s == null) {
            throw new ArgumentNullException("s");
        }
        if (index < 0 || index >= s.length) {
            throw new ArgumentOutOfRangeException("index", Environment.GetResourceString("ArgumentOutOfRange_Index"));
        }
        //Contract.EndContractBlock();
        return (CharUnicodeInfo.InternalGetDigitValue(CharUnicodeInfo.InternalConvertToUtf32(s, index)));
    }

    public static GetUnicodeCategory(ch: char): UnicodeCategory {
        return (CharUnicodeInfo.InternalGetUnicodeCategory(ch));
    }

    public static GetUnicodeCategory1(s: string, index: int): UnicodeCategory {
        if (s == null)
            throw new ArgumentNullException("s");
        if ((Convert.ToUInt32(index)) >= (Convert.ToUInt32(s.length))) {
            throw new ArgumentOutOfRangeException("index");
        }
        // Contract.EndContractBlock();
        return CharUnicodeInfo.InternalGetUnicodeCategory2(s, index);
    }

    public /* internal unsafe */ static InternalGetUnicodeCategory(ch: int): UnicodeCategory {
        return CharUnicodeInfo.InternalGetCategoryValue(ch, CharUnicodeInfo.UNICODE_CATEGORY_OFFSET);
    }

    ////////////////////////////////////////////////////////////////////////
    //
    //Action: Returns the Unicode Category property for the character c.
    //Returns:
    //  an value in UnicodeCategory enum
    //Arguments:
    //  ch  a Unicode character
    //Exceptions:
    //  None
    //
    //Note that this API will return values for D800-DF00 surrogate halves.
    //
    ////////////////////////////////////////////////////////////////////////

    // [System.Security.SecuritySafeCritical]  // auto-generated
    public /* internal unsafe */ static InternalGetCategoryValue(ch: int, offset: int): byte {
        //Contract.Assert(ch >= 0 && ch <= 0x10ffff, "ch is not in valid Unicode range.");
        // Get the level 2 item from the highest 12 bit (8 - 19) of ch.
        let index: int = Convert.ToUShort(CharUnicodeInfo.s_pCategoryLevel1Index[ch >> 8]);
        // Get the level 2 WORD offset from the 4 - 7 bit of ch.  This provides the base offset of the level 3 table.
        // Note that & has the lower precedence than addition, so don't forget the parathesis.
        index = Convert.ToUShort(CharUnicodeInfo.s_pCategoryLevel1Index[index + ((ch >> 4) & 0x000f)]);
        const pBytePtr: int = /* (byte *) &  */(CharUnicodeInfo.s_pCategoryLevel1Index[index]);
        // Get the result from the 0 -3 bit of ch.
        const valueIndex: byte = category_data[pBytePtr + (ch & 0x000f)];
        const uc: byte = CharUnicodeInfo.s_pCategoriesValue[valueIndex * 2 + offset];
        //
        // Make sure that OtherNotAssigned is the last category in UnicodeCategory.
        // If that changes, change the following assertion as well.
        //
        //Contract.Assert(uc >= 0 && uc <= UnicodeCategory.OtherNotAssigned, "Table returns incorrect Unicode category");
        return (uc);
    }

    //      internal static BidiCategory GetBidiCategory(char ch) {
    //          return ((BidiCategory)InternalGetCategoryValue(c, BIDI_CATEGORY_OFFSET));
    //      }

    public /* internal */ static GetBidiCategory(s: string, index: int): BidiCategory {
        if (s == null)
            throw new ArgumentNullException("s");
        if ((Convert.ToUInt32(index)) >= (Convert.ToUInt32(s.length))) {
            throw new ArgumentOutOfRangeException("index");
        }
        //Contract.EndContractBlock();
        return (CharUnicodeInfo.InternalGetCategoryValue(CharUnicodeInfo.InternalConvertToUtf32(s, index), CharUnicodeInfo.BIDI_CATEGORY_OFFSET));
    }

    ////////////////////////////////////////////////////////////////////////
    //
    //Action: Returns the Unicode Category property for the character c.
    //Returns:
    //  an value in UnicodeCategory enum
    //Arguments:
    //  value  a Unicode String
    //  index  Index for the specified string.
    //Exceptions:
    //  None
    //
    ////////////////////////////////////////////////////////////////////////

    public/* internal */ static InternalGetUnicodeCategory2(value: string, index: int): UnicodeCategory {
        /*  Contract.Assert(value != null, "value can not be null");
         Contract.Assert(index < value.Length, "index < value.Length"); */

        return (CharUnicodeInfo.InternalGetUnicodeCategory(CharUnicodeInfo.InternalConvertToUtf32(value, index)));
    }

    ////////////////////////////////////////////////////////////////////////
    //
    // Get the Unicode category of the character starting at index.  If the character is in BMP, charLength will return 1.
    // If the character is a valid surrogate pair, charLength will return 2.
    //
    ////////////////////////////////////////////////////////////////////////

    public /* internal */ static InternalGetUnicodeCategory3(str: string, index: int, charLength: Out<int>): UnicodeCategory {
        /*  Contract.Assert(str != null, "str can not be null");
         Contract.Assert(str.Length > 0, "str.Length > 0");;
         Contract.Assert(index >= 0 && index < str.Length, "index >= 0 && index < str.Length"); */

        return (CharUnicodeInfo.InternalGetUnicodeCategory(CharUnicodeInfo.InternalConvertToUtf32_1(str, index, charLength)));
    }

    public /* internal */ static IsCombiningCategory(uc: UnicodeCategory): boolean {
        //Contract.Assert(uc >= 0, "uc >= 0");
        return (
            uc === UnicodeCategory.NonSpacingMark ||
            uc === UnicodeCategory.SpacingCombiningMark ||
            uc === UnicodeCategory.EnclosingMark
        );
    }

}

export class TChar {
    private static readonly categoryForLatin1: ByteArray = New.ByteArray([
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0000 - 0007
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0008 - 000F
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0010 - 0017
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0018 - 001F
        Convert.ToByte(UnicodeCategory.SpaceSeparator),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.CurrencySymbol),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),    // 0020 - 0027
        Convert.ToByte(UnicodeCategory.OpenPunctuation),
        Convert.ToByte(UnicodeCategory.ClosePunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.DashPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),    // 0028 - 002F
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),    // 0030 - 0037
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.DecimalDigitNumber),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),    // 0038 - 003F
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),    // 0040 - 0047
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),    // 0048 - 004F
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),    // 0050 - 0057
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.OpenPunctuation),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.ClosePunctuation),
        Convert.ToByte(UnicodeCategory.ModifierSymbol),
        Convert.ToByte(UnicodeCategory.ConnectorPunctuation),    // 0058 - 005F
        Convert.ToByte(UnicodeCategory.ModifierSymbol),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 0060 - 0067
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 0068 - 006F
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 0070 - 0077
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.OpenPunctuation),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.ClosePunctuation),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.Control),    // 0078 - 007F
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0080 - 0087
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0088 - 008F
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0090 - 0097
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),
        Convert.ToByte(UnicodeCategory.Control),    // 0098 - 009F
        Convert.ToByte(UnicodeCategory.SpaceSeparator),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),
        Convert.ToByte(UnicodeCategory.CurrencySymbol),
        Convert.ToByte(UnicodeCategory.CurrencySymbol),
        Convert.ToByte(UnicodeCategory.CurrencySymbol),
        Convert.ToByte(UnicodeCategory.CurrencySymbol),
        Convert.ToByte(UnicodeCategory.OtherSymbol),
        Convert.ToByte(UnicodeCategory.OtherSymbol),    // 00A0 - 00A7
        Convert.ToByte(UnicodeCategory.ModifierSymbol),
        Convert.ToByte(UnicodeCategory.OtherSymbol),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.InitialQuotePunctuation),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.DashPunctuation),
        Convert.ToByte(UnicodeCategory.OtherSymbol),
        Convert.ToByte(UnicodeCategory.ModifierSymbol),    // 00A8 - 00AF
        Convert.ToByte(UnicodeCategory.OtherSymbol),
        Convert.ToByte(UnicodeCategory.MathSymbol),
        Convert.ToByte(UnicodeCategory.OtherNumber),
        Convert.ToByte(UnicodeCategory.OtherNumber),
        Convert.ToByte(UnicodeCategory.ModifierSymbol),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.OtherSymbol),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),    // 00B0 - 00B7
        Convert.ToByte(UnicodeCategory.ModifierSymbol),
        Convert.ToByte(UnicodeCategory.OtherNumber),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.FinalQuotePunctuation),
        Convert.ToByte(UnicodeCategory.OtherNumber),
        Convert.ToByte(UnicodeCategory.OtherNumber),
        Convert.ToByte(UnicodeCategory.OtherNumber),
        Convert.ToByte(UnicodeCategory.OtherPunctuation),    // 00B8 - 00BF
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),    // 00C0 - 00C7
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),    // 00C8 - 00CF
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.MathSymbol),    // 00D0 - 00D7
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.UppercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 00D8 - 00DF
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 00E0 - 00E7
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 00E8 - 00EF
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.MathSymbol),    // 00F0 - 00F7
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),
        Convert.ToByte(UnicodeCategory.LowercaseLetter),    // 00F8 - 00FF
    ]);

    public static IsSurrogate(c: char): boolean {
        //return category_data[c] === UnicodeCategory.Surrogate;
        return c >= 55296 && c <= 57343;
    }

    // Return true for all characters below or equal U+007f, which is ASCII.
    private static IsAscii(ch: char): boolean {
        return (ch <= '\x007f'.charCodeAt(0));
    }

    /*=================================ISLETTER=====================================
   **A wrapper for Char.  Returns a boolean indicating whether    **
   **character c is considered to be a letter.                                   **
   ==============================================================================*/
    // Determines whether a character is a letter.
    public static IsLetter(c: char): boolean {
        if (TChar.IsLatin1(c)) {
            if (TChar.IsAscii(c)) {
                c |= Convert.ToChar(0x20);
                return ((c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)));
            }
            return (TChar.CheckLetter(TChar.GetLatin1UnicodeCategory(c)));
        }
        return (TChar.CheckLetter(CharUnicodeInfo.GetUnicodeCategory(c)));
    }

    /*=================================CheckLetter=====================================
  ** Check if the specified UnicodeCategory belongs to the letter categories.
  ==============================================================================*/
    public /* internal */ static CheckLetter(uc: UnicodeCategory): boolean {
        switch (uc) {
            case (UnicodeCategory.UppercaseLetter):
            case (UnicodeCategory.LowercaseLetter):
            case (UnicodeCategory.TitlecaseLetter):
            case (UnicodeCategory.ModifierLetter):
            case (UnicodeCategory.OtherLetter):
                return (true);
        }
        return (false);
    }
    private static IsWhiteSpaceLatin1(c: char): boolean {
        if (c !== ' '.charCodeAt(0) && (c < '\t'.charCodeAt(0) || c > '\r'.charCodeAt(0)) && c !== '\u00A0'.charCodeAt(0) && c !== '\u0085'.charCodeAt(0)) {
            return false;
        }
        return true;
    }
    private static IsLatin1(ch: char): boolean {
        return ch <= 'ÿ'.charCodeAt(0);
    }
    public static IsWhiteSpace(c: char): boolean {
        if (TChar.IsLatin1(c)) {
            return TChar.IsWhiteSpaceLatin1(c);
        }
        return isWhitespace(c);
    }
    // Determines whether a character is a letter or a digit.
    public static IsLetterOrDigit(c: char): boolean {
        if (TChar.IsLatin1(c)) {
            return (TChar.CheckLetterOrDigit(TChar.GetLatin1UnicodeCategory(c)));
        }
        return (TChar.CheckLetterOrDigit(CharUnicodeInfo.GetUnicodeCategory(c)));
    }

    // Return the Unicode category for Unicode character <= 0x00ff.
    private static GetLatin1UnicodeCategory(ch: char): UnicodeCategory {
        return (TChar.categoryForLatin1[ch]);
    }

    /*=================================CheckLetterOrDigit=====================================
    ** Check if the specified UnicodeCategory belongs to the letter or digit categories.
    ==============================================================================*/
    public /* internal */ static CheckLetterOrDigit(uc: UnicodeCategory): boolean {
        switch (uc) {
            case UnicodeCategory.UppercaseLetter:
            case UnicodeCategory.LowercaseLetter:
            case UnicodeCategory.TitlecaseLetter:
            case UnicodeCategory.ModifierLetter:
            case UnicodeCategory.OtherLetter:
            case UnicodeCategory.DecimalDigitNumber:
                return (true);
        }
        return (false);
    }

    public static IsDigit(c: char): boolean;
    public static IsDigit(c: string): boolean;
    public static IsDigit(...args: any[]): boolean {
        if (args.length === 1 && is.number(args[0])) {
            const c = args[0];
            if (TChar.IsLatin1(c)) {
                return (c >= '0'.charCodeAt(0) && c <= '9'.charCodeAt(0));
            }
            return (CharUnicodeInfo.GetUnicodeCategory(c) === UnicodeCategory.DecimalDigitNumber);
        } else if (args.length === 1 && is.string(args[0])) {
            const c = args[0].charCodeAt(0);
            if (TChar.IsLatin1(c)) {
                return (c >= '0'.charCodeAt(0) && c <= '9'.charCodeAt(0));
            }
            return (CharUnicodeInfo.GetUnicodeCategory(c) === UnicodeCategory.DecimalDigitNumber);
        }
        throw new ArgumentOutOfRangeException('');
    }

    /*===================================ToLower====================================
  **
  ==============================================================================*/
    // Converts a character to lower-case for the specified culture.
    // <;<;Not fully implemented>;>;
    /*  public static ToLower(c: char, culture: CultureInfo): char;
     public static ToLower(c: char): char;
     public static ToLower(...args: any[]): char {
         if (args.length === 2) {
             const c: char = args[0];
             const culture: CultureInfo = args[1];
             if (culture == null)
                 throw new ArgumentNullException("culture");
             //Contract.EndContractBlock();
             return culture.TextInfo.ToLower(c);
         } else if (args.length === 1) {
             const c: char = args[0];
             return TChar.ToLower(c, CultureInfo.CurrentCulture);
         }
         throw new ArgumentOutOfRangeException('');
     } */
    public static ToLower(c: char, culture: CultureInfo): char
    public static ToLower(c: char): char;
    public static ToLower(...args: any[]): char {
        return String.fromCharCode(args[0]).toLowerCase()[0].charCodeAt(0);
    }

    /*===================================ToUpper====================================
    **
    ==============================================================================*/
    // Converts a character to upper-case for the specified culture.
    // <;<;Not fully implemented>;>;
    public static ToUpper(c: char): char;
    public static ToUpper(c: char, culture: CultureInfo): char;
    public static ToUpper(...args: any[]): char {
        if (args.length === 1 && is.char(args[0])) {
            const c: char = args[0];
            const _CultureInfo = Context.Current.get('CultureInfo');
            return TChar.ToUpper(c, _CultureInfo.CurrentCulture);
        } else if (args.length === 2 && is.char(args[0]) && is.typeof<CultureInfo>(args[1], System.Types.Globalization.CultureInfo)) {
            const c: char = args[0];
            const culture: CultureInfo = args[1];
            if (culture == null)
                throw new ArgumentNullException("culture");
            //Contract.EndContractBlock();
            return culture.TextInfo.ToUpper(c);
        }
        throw new ArgumentOutOfRangeException('');
    }

    // Converts a character to upper-case for invariant culture.
    public static ToUpperInvariant(c: char): char {
        return TChar.ToUpper(c, CultureInfo.InvariantCulture);
    }

    public static IsSurrogatePair(s: string, index: int): boolean;
    public static IsSurrogatePair(highSurrogate: char, lowSurrogate: char): boolean;
    public static IsSurrogatePair(...args: any[]): boolean {
        if (args.length === 2 && is.string(args[0]) && is.int(args[1])) {
            const s: string = args[0];
            const index: int = args[1];
            if (s == null) {
                throw new ArgumentNullException("s");
            }
            if (index < 0 || index >= s.length) {
                throw new ArgumentOutOfRangeException("index");
            }
            // Contract.EndContractBlock();
            if (index + 1 < s.length) {
                return (TChar.IsSurrogatePair(s[index].charCodeAt(0), s[index + 1].charCodeAt(0)));
            }
            return false;
        } else if (args.length === 2 && is.char(args[0]) && is.char(args[1])) {
            const highSurrogate: char = args[0];
            const lowSurrogate: char = args[1];
            return ((highSurrogate >= CharUnicodeInfo.HIGH_SURROGATE_START && highSurrogate <= CharUnicodeInfo.HIGH_SURROGATE_END) &&
                (lowSurrogate >= CharUnicodeInfo.LOW_SURROGATE_START && lowSurrogate <= CharUnicodeInfo.LOW_SURROGATE_END));
        }
        throw new ArgumentOutOfRangeException('');
    }
}