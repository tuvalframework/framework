import { Event } from './Event';
import { DisplayObject } from '../display/DisplayObject';

/**
 * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,
 * see the {@link DisplayObject} and {@link Stage} event listings.
 * @extends core.Event
 * @param {String} type The event type.
 * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.
 * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.
 * @param {Number} stageX The normalized x position relative to the stage.
 * @param {Number} stageY The normalized y position relative to the stage.
 * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.
 * @param {Number} pointerID The unique id for the pointer.
 * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.
 * @param {Number} rawX The raw x position relative to the stage.
 * @param {Number} rawY The raw y position relative to the stage.
 * @param {DisplayObject} relatedTarget The secondary target for the event.
 */
export class MouseEvent  extends Event{

	/**
	 * The normalized x position on the stage. This will always be within the range 0 to stage width.
	 * @type {Number}
	*/
	public stageX: number;
	/**
	 * The normalized y position on the stage. This will always be within the range 0 to stage height.
	 * @type {Number}
	 */
	public stageY: number;

	/**
	 * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless
	 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	 * @type {Number}
	*/
	public rawX: number;

	/**
	 * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless
	 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	 * @type {Number}
	*/
	public rawY: number;


	/**
	 * The native MouseEvent generated by the browser. The properties and API for this
	 * event may differ between browsers. This property will be null if the
	 * EaselJS property was not directly generated from a native MouseEvent.
	 * @type {HTMLMouseEvent}
	 */
	public nativeEvent: any;

	/**
	 * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system
	 * supplied id value.
	 * @type {Number}
	 */
	public pointerID: number;
	/**
	 * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.
	 * For touch pointers, the first pointer in the current stack will be considered the primary pointer.
	 * @type {Boolean}
	 */
	public primary: boolean = false;

	/**
		 * The secondary target for the event, if applicable. This is used for mouseout/rollout
		 * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,
		 * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.
		 *
		 * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).
		 * @type {DisplayObject}
		 */
	public relatedTarget: DisplayObject;

	public currentTarget: DisplayObject = undefined as any;

	constructor(type: string, bubbles: boolean, cancelable: boolean, stageX: number, stageY: number, nativeEvent: MouseEvent, pointerID: number,
		primary: boolean, rawX: number, rawY: number, relatedTarget?: DisplayObject) {
		super(type, bubbles /*, cancelable */);

		// public properties:
		this.stageX = stageX;
		this.stageY = stageY;
		this.rawX = (rawX == null) ? stageX : rawX;
		this.rawY = (rawY == null) ? stageY : rawY;
		this.nativeEvent = nativeEvent;
		this.pointerID = pointerID;
		this.primary = !!primary;
		this.relatedTarget = relatedTarget as any;
	}

	/**
	 * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).
	 * @type {Number}
	 * @readonly
	 */
	get localX() {
		return (this.currentTarget).globalToLocal(this.rawX, this.rawY).X;
	}

	/**
	 * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).
	 * @type {Number}
	 * @readonly
	 */
	get localY() {
		return (<any>this.currentTarget).globalToLocal(this.rawX, this.rawY).Y;
	}

	/**
	 * Indicates whether the event was generated by a touch input (versus a mouse input).
	 * @type {Boolean}
	 * @readonly
	 */
	get isTouch() {
		return this.pointerID !== -1;
	}

	/**
	 * Returns a clone of the MouseEvent instance.
	 * @return {MouseEvent} a clone of the MouseEvent instance.
	 */
	clone() {
		return new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString() {
		return `[${this.constructor.name} (type=${this.type} stageX=${this.stageX} stageY=${this.stageY})]`;
	}
}