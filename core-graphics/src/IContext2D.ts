import { CGBlendMode } from './CGBlendMode';
import { float, byte, ByteArray } from "@tuval/core";
import { CGAffineTransform } from "./CGAffineTransform";
/* import { CGLineCap, CGLineJoin, CGBlendMode,
    CGPathDrawingMode, CGTextDrawingMode, CGTextEncoding,
    CGInterpolationQuality } from "./CGContext"; */
import { CGRectangle } from "./CGRectangle";
import { CGPoint } from "./CGPoint";
import { CGColor } from "./CGColor/CGColor";
import { CGPattern } from "./CGPattern";
import { CGSize } from "./CGSize";
import { CGInterpolationQuality } from "./CGInterpolationQuality";
import { CGLineCap } from "./CGLineCap";
import { CGLineJoin } from "./CGLineJoin";
import { CGPathDrawingMode } from './CGPath/CGPathDrawingMode';
import { CGTextDrawingMode } from './CGTextDrawingMode';
import { CGTextEncoding } from './CGTextEncoding';
import { CGPath } from './CGPath/CGPath';
import { CGFont } from './CGFont/CGFont';

export interface IContext2D {
    InterpolationQuality: CGInterpolationQuality;
    scaleCTM(sx: float, sy: float): void;
    translateCTM(tx: float, ty: float): void;
    rotateCTM(angle: float): void;
    concatCTM(transform: CGAffineTransform): void;
    saveState(): void;
    restoreState(): void;
    setLineWidth(w: float): void;
    setLineCap(cap: CGLineCap);
    setLineJoin(join: CGLineJoin): void;
    setMiterLimit(limit: float): void;
    setLineDash(phase: float, lengths: float[]): void;
    setLineDash(phase: float, lengths: float[], n: number): void;
    setFlatness(flatness: float): void;
    setAlpha(alpha: float): void;
    setBlendMode(mode: CGBlendMode): void;
    setTextAlign(textAlign: string): void;
    setTextBaseline(textAlign: string):void;
    getCTM(): CGAffineTransform;
    beginPath(): void;
    moveTo(x: float, y: float): void;
    addLineToPoint(x: float, y: float): void;
    addCurveToPoint(cp1x: float, cp1y: float, cp2x: float, cp2y: float, x: float, y: float): void;
    addQuadCurveToPoint(cpx: float, cpy: float, x: float, y: float): void;
    closePath(): void;
    addRect(rect: CGRectangle): void;
    addRects(rects: CGRectangle[]): void;
    addLines(points: CGPoint[]): void;
    addEllipseInRect(rect: CGRectangle): void;
    addArc(x: float, y: float, radius: float, startAngle: float, endAngle: float, clockwise: boolean): void;
    addArcToPoint(x1: float, y1: float, x2: float, y2: float, radius: float): void;
    addPath(path: CGPath): void;
    replacePathWithStrokedPath(): void;
    getPathCurrentPoint(): CGPoint;
    getPathBoundingBox(): CGRectangle;
    pathContainsPoint(point: CGPoint, mode: CGPathDrawingMode): boolean;
    drawPath(mode: CGPathDrawingMode);
    fillPath(): void;
    eOFillPath(): void;
    strokePath(): void;
    fillRect(rect: CGRectangle): void;
    contextFillRects(rects: CGRectangle[]): void;
    strokeRect(rect: CGRectangle): void;
    strokeRectWithWidth(rect: CGRectangle, width: float): void;
    clearRect(rect: CGRectangle): void;
    fillEllipseInRect(rect: CGRectangle): void;
    strokeEllipseInRect(rect: CGRectangle): void;
    strokeLineSegments(points: CGPoint[]): void;
    eOClip(): void;
    clipToMask(rect: CGRectangle, mask: any /*CGImage*/): void;
    getClipBoundingBox(): CGRectangle;
    clip(): void;
    clipToRect(rect: CGRectangle): void;
    clipToRects(rects: CGRectangle[]): void;
    setFillColor(cyan: float, magenta: float, yellow: float, black: float, alpha: float): void;
    setFillColor(gray: float, alpha: float): void;
    setFillColor(components: float[]): void;
    setFillColor(color: CGColor): void;
    setFillColor(red: float, green: float, blue: float, alpha: float): void;
    setFillColorWithColor(color: CGColor): void;
    setStrokeColor(cyan: float, magenta: float, yellow: float, black: float, alpha: float): void;
    setStrokeColor(red: float, green: float, blue: float, alpha: float): void;
    setStrokeColor(gray: float, alpha: float): void;
    setStrokeColor(components: float[]): void;
    setStrokeColor(color: CGColor): void;
    setStrokeColorWithColor(color: CGColor): void;
    setFillColorSpace(space: any): void;
    setStrokeColorSpace(space: any): void;
    setFillPattern(pattern: CGPattern, components: float[]): void;
    setStrokePattern(pattern: any, components: float[]): void;
    setPatternPhase(phase: CGSize): void;
    setGrayFillColor(gray: float, alpha: float): void;
    setGrayStrokeColor(gray: float, alpha: float): void;
    setRGBFillColor(red: float, green: float, blue: float, alpha: float): void;
    setRGBStrokeColor(red: float, green: float, blue: float, alpha: float): void;
    setCMYKFillColor(cyan: float, magenta: float, yellow: float, black: float, alpha: float): void;
    setCMYKStrokeColor(cyan: float, magenta: float, yellow: float, black: float, alpha: float): void;
    setRenderingIntent(intent: any /*CGColorRenderingIntent*/): void;
    drawImage(image: any, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;
    drawTiledImage(rect: CGRectangle, image: any /*CGImage*/): void;
    setShadowWithColor(offset: CGSize, blur: float, color: CGColor): void;
    setShadow(offset: CGSize, blur: float): void;
    drawLinearGradient(gradient: any /*CGGradient*/, startPoint: CGPoint, endPoint: CGPoint, options: any /*CGGradientDrawingOptions*/): void;
    drawRadialGradient(gradient: any /*CGGradient*/, startCenter: CGPoint, startRadius: float, endCenter: CGPoint, endRadius: float, options: any /*CGGradientDrawingOptions*/): void;
    setCharacterSpacing(spacing: float): void;
    setTextDrawingMode(mode: CGTextDrawingMode): void;
    setFont(font: CGFont /*CGFont*/): void;
    measureText(text: string, font: CGFont): CGSize;
    selectFont(name: string, size: float, textEncoding: CGTextEncoding): void;
    showGlyphsAtPositions(glyphs: number[], positions: CGPoint[], size_t_count: number): void;
    showText(str: string, x: number, y: number): void;
    showTextAtPoint(x: float, y: float, bytes: ByteArray): void;
    showTextAtPoint(x: float, y: float, bytes: ByteArray, length: number): void;
    showTextAtPoint(x: float, y: float, str: string): void;
    showTextAtPoint(x: float, y: float, str: string, length: number): void;
    showGlyphs(glyphs: ByteArray, count: number): void;
    showGlyphs(glyphs: ByteArray): void;
    showGlyphsWithAdvances(glyphs: ByteArray, advances: CGSize[], count: number): void;
    drawPDFPage(page: any /*CGPDFPage*/): void;
    beginPage(rect: CGRectangle): void;
    endPage(): void;
    setShouldAntialias(shouldAntialias: boolean): void;
    synchronize(): void;
    transferToImageBitmap():ImageBitmap;
    drawImageBitmap(image: ImageBitmap, x: float, y: float): void;
}